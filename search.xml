<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Evo7Hu'Blog","short_name":"Evo7Hu","theme_color":"#3b70fc","background_color":"#3b70fc","display":"fullscreen","scope":"/","start_url":"/","id":"/","icons":[{"src":"img/siteicon/manifest-icon-192.maskable.png","sizes":"192x192","type":"image/png","purpose":"any"},{"src":"img/siteicon/manifest-icon-192.maskable.png","sizes":"192x192","type":"image/png","purpose":"maskable"},{"src":"img/siteicon/manifest-icon-512.maskable.png","sizes":"512x512","type":"image/png","purpose":"any"},{"src":"img/siteicon/manifest-icon-512.maskable.png","sizes":"512x512","type":"image/png","purpose":"maskable"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于她</title>
      <link href="/abouther/index.html"/>
      <url>/abouther/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>便携小空调 - 为你的夏日带去清凉!</title>
      <link href="/air-conditioner/index.html"/>
      <url>/air-conditioner/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于为博客安装上了便携小空调</p></blockquote><style>.copyright-box a {  border-bottom: none !important;  padding: 0 !important;}</style><p><div id="air-conditioner-vue"></div></p><script defer data-pjax src='https://npm.elemecdn.com/anzhiyu-air-conditioner@1.0.1/index.3f125bc6.js'></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>日常生活</title>
      <link href="/dailyPhoto/index.html"/>
      <url>/dailyPhoto/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的装备</title>
      <link href="/equipment/index.html"/>
      <url>/equipment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>朋友圈</title>
      <link href="/fcircle/index.html"/>
      <url>/fcircle/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>相册集</title>
      <link href="/album/index.html"/>
      <url>/album/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>即刻短文</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/main.js"/>
      <url>/js/main.js</url>
      
        <content type="html"><![CDATA[// 第一次播放音乐var anzhiyu_musicFirst = false;// 快捷键var anzhiyu_keyboard = null;// 音乐播放状态var anzhiyu_musicPlaying = false;var $bodyWrap = document.getElementById("body-wrap");var anzhiyu_intype = false;var anzhiyu_keyUpEvent_timeoutId = null;var anzhiyu_keyUpShiftDelayEvent_timeoutId = null;// 右键菜单对象var rm = null;var popupWindowTimer = null;var adjectives = [  "美丽的",  "英俊的",  "聪明的",  "勇敢的",  "可爱的",  "慷慨的",  "善良的",  "可靠的",  "开朗的",  "成熟的",  "稳重的",  "真诚的",  "幽默的",  "豁达的",  "有趣的",  "活泼的",  "优雅的",  "敏捷的",  "温柔的",  "温暖的",  "敬业的",  "细心的",  "耐心的",  "深沉的",  "朴素的",  "含蓄的",  "率直的",  "开放的",  "务实的",  "坚强的",  "自信的",  "谦虚的",  "文静的",  "深刻的",  "纯真的",  "朝气蓬勃的",  "慎重的",  "大方的",  "顽强的",  "迷人的",  "机智的",  "善解人意的",  "富有想象力的",  "有魅力的",  "独立的",  "好奇的",  "干净的",  "宽容的",  "尊重他人的",  "体贴的",  "守信的",  "有耐性的",  "有责任心的",  "有担当的",  "有远见的",  "有智慧的",  "有眼光的",  "有冒险精神的",  "有爱心的",  "有同情心的",  "喜欢思考的",  "喜欢学习的",  "具有批判性思维的",  "善于表达的",  "善于沟通的",  "善于合作的",  "善于领导的",  "有激情的",  "有幽默感的",  "有思想的",  "有个性的",  "有正义感的",  "有责任感的",  "有创造力的",  "有想象力的",  "有艺术细胞的",  "有团队精神的",  "有协调能力的",  "有决策能力的",  "有组织能力的",  "有学习能力的",  "有执行能力的",  "有分析能力的",  "有逻辑思维的",  "有创新能力的",  "有专业素养的",  "有商业头脑的",];var vegetablesAndFruits = [  "萝卜",  "白菜",  "芹菜",  "生菜",  "青椒",  "辣椒",  "茄子",  "豆角",  "黄瓜",  "西红柿",  "洋葱",  "大蒜",  "土豆",  "南瓜",  "豆腐",  "韭菜",  "花菜",  "西兰花",  "蘑菇",  "金针菇",  "苹果",  "香蕉",  "橙子",  "柠檬",  "猕猴桃",  "草莓",  "葡萄",  "桃子",  "杏子",  "李子",  "石榴",  "西瓜",  "哈密瓜",  "蜜瓜",  "樱桃",  "蓝莓",  "柿子",  "橄榄",  "柚子",  "火龙果",];// 已随机的歌曲var selectRandomSong = [];// 音乐默认声音大小var musicVolume = 0.8;// 是否切换了周杰伦音乐列表var changeMusicListFlag = false;// 当前默认播放列表var defaultPlayMusicList = [];var themeColorMeta, pageHeaderEl, navMusicEl, consoleEl;document.addEventListener("DOMContentLoaded", function () {  let headerContentWidth, $nav, $rightMenu;  let mobileSidebarOpen = false;  const adjustMenu = init => {    const getAllWidth = ele => {      return Array.from(ele).reduce((width, i) => width + i.offsetWidth, 0);    };    if (init) {      const blogInfoWidth = getAllWidth(document.querySelector("#blog_name > a").children);      const menusWidth = getAllWidth(document.getElementById("menus").children);      headerContentWidth = blogInfoWidth + menusWidth;      $nav = document.getElementById("nav");    }    const hideMenuIndex = window.innerWidth <= 768 || headerContentWidth > $nav.offsetWidth - 120;    $nav.classList.toggle("hide-menu", hideMenuIndex);  };  // 初始化header  const initAdjust = () => {    adjustMenu(true);    $nav.classList.add("show");  };  // sidebar menus  const sidebarFn = {    open: () => {      anzhiyu.sidebarPaddingR();      anzhiyu.animateIn(document.getElementById("menu-mask"), "to_show 0.5s");      document.getElementById("sidebar-menus").classList.add("open");      mobileSidebarOpen = true;    },    close: () => {      const $body = document.body;      $body.style.paddingRight = "";      anzhiyu.animateOut(document.getElementById("menu-mask"), "to_hide 0.5s");      document.getElementById("sidebar-menus").classList.remove("open");      mobileSidebarOpen = false;    },  };  /**   * 首頁top_img底下的箭頭   */  const scrollDownInIndex = () => {    const handleScrollToDest = () => {      const bbTimeList = document.getElementById("bbTimeList");      if (bbTimeList) {        anzhiyu.scrollToDest(bbTimeList.offsetTop - 62, 300);      } else {        anzhiyu.scrollToDest(document.getElementById("home_top").offsetTop - 60, 300);      }    };    const $scrollDownEle = document.getElementById("scroll-down");    $scrollDownEle && anzhiyu.addEventListenerPjax($scrollDownEle, "click", handleScrollToDest);  };  /**   * 代码   * 只适用于Hexo默认的代码渲染   */  const addHighlightTool = function () {    const highLight = GLOBAL_CONFIG.highlight;    if (!highLight) return;    const { highlightCopy, highlightLang, highlightHeightLimit, plugin } = highLight;    const isHighlightShrink = GLOBAL_CONFIG_SITE.isHighlightShrink;    const isShowTool = highlightCopy || highlightLang || isHighlightShrink !== undefined;    const $figureHighlight =      plugin === "highlight.js"        ? document.querySelectorAll("figure.highlight")        : document.querySelectorAll('pre[class*="language-"]');    if (!((isShowTool || highlightHeightLimit) && $figureHighlight.length)) return;    const isPrismjs = plugin === "prismjs";    const highlightShrinkClass = isHighlightShrink === true ? "closed" : "";    const highlightShrinkEle =      isHighlightShrink !== undefined        ? '<i class="anzhiyufont anzhiyu-icon-angle-down expand ${highlightShrinkClass}"></i>'        : "";    const highlightCopyEle = highlightCopy      ? '<div class="copy-notice"></div><i class="anzhiyufont anzhiyu-icon-paste copy-button"></i>'      : "";    const alertInfo = (ele, text) => {      if (GLOBAL_CONFIG.Snackbar !== undefined) {        anzhiyu.snackbarShow(text);      } else {        const prevEle = ele.previousElementSibling;        prevEle.textContent = text;        prevEle.style.opacity = 1;        setTimeout(() => {          prevEle.style.opacity = 0;        }, 800);      }    };    const copy = ctx => {      if (document.queryCommandSupported && document.queryCommandSupported("copy")) {        document.execCommand("copy");        alertInfo(ctx, GLOBAL_CONFIG.copy.success);      } else {        alertInfo(ctx, GLOBAL_CONFIG.copy.noSupport);      }    };    // click events    const highlightCopyFn = ele => {      const $buttonParent = ele.parentNode;      $buttonParent.classList.add("copy-true");      const selection = window.getSelection();      const range = document.createRange();      const preCodeSelector = isPrismjs ? "pre code" : "table .code pre";      range.selectNodeContents($buttonParent.querySelectorAll(`${preCodeSelector}`)[0]);      selection.removeAllRanges();      selection.addRange(range);      copy(ele.lastChild);      selection.removeAllRanges();      $buttonParent.classList.remove("copy-true");    };    const highlightShrinkFn = ele => {      ele.classList.toggle("closed");    };    const highlightToolsFn = function (e) {      const $target = e.target.classList;      if ($target.contains("expand")) highlightShrinkFn(this);      else if ($target.contains("copy-button")) highlightCopyFn(this);    };    const expandCode = function () {      this.classList.toggle("expand-done");    };    const createEle = (lang, item, service) => {      const fragment = document.createDocumentFragment();      if (isShowTool) {        const hlTools = document.createElement("div");        hlTools.className = `highlight-tools ${highlightShrinkClass}`;        hlTools.innerHTML = highlightShrinkEle + lang + highlightCopyEle;        anzhiyu.addEventListenerPjax(hlTools, "click", highlightToolsFn);        fragment.appendChild(hlTools);      }      if (highlightHeightLimit && item.offsetHeight > highlightHeightLimit + 30) {        const ele = document.createElement("div");        ele.className = "code-expand-btn";        ele.innerHTML = '<i class="anzhiyufont anzhiyu-icon-angle-double-down"></i>';        anzhiyu.addEventListenerPjax(ele, "click", expandCode);        fragment.appendChild(ele);      }      if (service === "hl") {        item.insertBefore(fragment, item.firstChild);      } else {        item.parentNode.insertBefore(fragment, item);      }    };    if (isPrismjs) {      $figureHighlight.forEach(item => {        if (highlightLang) {          const langName = item.getAttribute("data-language") || "Code";          const highlightLangEle = `<div class="code-lang">${langName}</div>`;          anzhiyu.wrap(item, "figure", { class: "highlight" });          createEle(highlightLangEle, item);        } else {          anzhiyu.wrap(item, "figure", { class: "highlight" });          createEle("", item);        }      });    } else {      $figureHighlight.forEach(item => {        if (highlightLang) {          let langName = item.getAttribute("class").split(" ")[1];          if (langName === "plain" || langName === undefined) langName = "Code";          const highlightLangEle = `<div class="code-lang">${langName}</div>`;          createEle(highlightLangEle, item, "hl");        } else {          createEle("", item, "hl");        }      });    }  };  /**   * PhotoFigcaption   */  function addPhotoFigcaption() {    document.querySelectorAll("#article-container img").forEach(function (item) {      const parentEle = item.parentNode;      const altValue = item.title || item.alt;      if (altValue && !parentEle.parentNode.classList.contains("justified-gallery")) {        const ele = document.createElement("div");        ele.className = "img-alt is-center";        ele.textContent = altValue;        parentEle.insertBefore(ele, item.nextSibling);      }    });  }  /**   * Lightbox   */  const runLightbox = () => {    anzhiyu.loadLightbox(document.querySelectorAll("#article-container img:not(.no-lightbox)"));  };  /**   * justified-gallery 圖庫排版   */  const runJustifiedGallery = function (ele) {    const htmlStr = arr => {      let str = "";      const replaceDq = str => str.replace(/"/g, "&quot;"); // replace double quotes to &quot;      arr.forEach(i => {        const alt = i.alt ? `alt="${replaceDq(i.alt)}"` : "";        const title = i.title ? `title="${replaceDq(i.title)}"` : "";        const address = i.address ? i.address : "";        const galleryItem = `        <div class="fj-gallery-item">          ${address ? `<div class="tag-address">${address}</div>` : ""}          <img src="${i.url}" ${alt + title}>        </div>      `;        str += galleryItem;      });      return str;    };    const lazyloadFn = (i, arr, limit) => {      const loadItem = Number(limit);      const arrLength = arr.length;      if (arrLength > loadItem) i.insertAdjacentHTML("beforeend", htmlStr(arr.splice(0, loadItem)));      else {        i.insertAdjacentHTML("beforeend", htmlStr(arr));        i.classList.remove("lazyload");      }      window.lazyLoadInstance && window.lazyLoadInstance.update();      return arrLength > loadItem ? loadItem : arrLength;    };    const fetchUrl = async url => {      const response = await fetch(url);      return await response.json();    };    const runJustifiedGallery = (item, arr) => {      const limit = item.getAttribute("data-limit") ?? arr.length;      if (!item.classList.contains("lazyload") || arr.length < limit) {        // 不懒加载        item.innerHTML = htmlStr(arr);        item.nextElementSibling.style.display = "none";      } else {        if (!item.classList.contains("btn_album_detail_lazyload") || item.classList.contains("page_img_lazyload")) {          // 滚动懒加载          lazyloadFn(item, arr, limit);          const clickBtnFn = () => {            const lastItemLength = lazyloadFn(item, arr, limit);            fjGallery(              item,              "appendImages",              item.querySelectorAll(`.fj-gallery-item:nth-last-child(-n+${lastItemLength})`)            );            anzhiyu.loadLightbox(item.querySelectorAll("img"));            if (lastItemLength < Number(limit)) {              observer.unobserve(item.nextElementSibling);            }          };          // 创建IntersectionObserver实例          const observer = new IntersectionObserver((entries, observer) => {            entries.forEach(entry => {              // 如果元素进入视口              if (entry.isIntersecting) {                // 执行clickBtnFn函数                setTimeout(clickBtnFn(), 100);              }            });          });          observer.observe(item.nextElementSibling);        } else {          // 相册详情 按钮懒加载          lazyloadFn(item, arr, limit);          const clickBtnFn = () => {            const lastItemLength = lazyloadFn(item, arr, limit);            fjGallery(              item,              "appendImages",              item.querySelectorAll(`.fj-gallery-item:nth-last-child(-n+${lastItemLength})`)            );            anzhiyu.loadLightbox(item.querySelectorAll("img"));            lastItemLength < limit && item.nextElementSibling.removeEventListener("click", clickBtnFn);          };          item.nextElementSibling.addEventListener("click", clickBtnFn);        }      }      anzhiyu.initJustifiedGallery(item);      anzhiyu.loadLightbox(item.querySelectorAll("img"));      window.lazyLoadInstance && window.lazyLoadInstance.update();    };    const addJustifiedGallery = () => {      ele.forEach(item => {        item.classList.contains("url")          ? fetchUrl(item.textContent).then(res => {              runJustifiedGallery(item, res);            })          : runJustifiedGallery(item, JSON.parse(item.textContent));      });    };    if (window.fjGallery) {      addJustifiedGallery();      return;    }    getCSS(`${GLOBAL_CONFIG.source.justifiedGallery.css}`);    getScript(`${GLOBAL_CONFIG.source.justifiedGallery.js}`).then(addJustifiedGallery);  };  /**   * 滚动处理   */  const scrollFn = function () {    const $rightside = document.getElementById("rightside");    const innerHeight = window.innerHeight + 56;    let lastScrollTop = 0;    if (document.body.scrollHeight <= innerHeight) {      $rightside.style.cssText = "opacity: 1; transform: translateX(-58px)";    }    // find the scroll direction    function scrollDirection(currentTop) {      const result = currentTop > initTop; // true is down & false is up      initTop = currentTop;      return result;    }    let initTop = 0;    let isChatShow = true;    const $header = document.getElementById("page-header");    const $popupWindow = document.getElementById("popup-window");    const isChatBtnHide = typeof chatBtnHide === "function";    const isChatBtnShow = typeof chatBtnShow === "function";    // 第一次滑动到底部的标识符    let scrollBottomFirstFlag = false;    // 缓存常用dom元素    const musicDom = document.getElementById("nav-music"),      footerDom = document.getElementById("footer"),      waterfallDom = document.getElementById("waterfall"),      $percentBtn = document.getElementById("percent"),      $navTotop = document.getElementById("nav-totop"),      $bodyWrap = document.getElementById("body-wrap");    // 页面底部Dom是否存在    let pageBottomDomFlag = document.getElementById("post-comment") || document.getElementById("footer");    function percentageScrollFn(currentTop) {      // 处理滚动百分比      let docHeight = $bodyWrap.clientHeight;      const winHeight = document.documentElement.clientHeight;      const contentMath =        docHeight > winHeight ? docHeight - winHeight : document.documentElement.scrollHeight - winHeight;      const scrollPercent = currentTop / contentMath;      const scrollPercentRounded = Math.round(scrollPercent * 100);      const percentage = scrollPercentRounded > 100 ? 100 : scrollPercentRounded <= 0 ? 1 : scrollPercentRounded;      $percentBtn.textContent = percentage;      function isInViewPortOfOneNoDis(el) {        if (!el) return;        const elDisplay = window.getComputedStyle(el).getPropertyValue("display");        if (elDisplay == "none") {          return;        }        const viewPortHeight =          window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;        const offsetTop = el.offsetTop;        const scrollTop = document.documentElement.scrollTop;        const top = offsetTop - scrollTop;        return top <= viewPortHeight;      }      if (isInViewPortOfOneNoDis(pageBottomDomFlag || percentage > 90) && currentTop > 20) {        $navTotop.classList.add("long");        $percentBtn.textContent = "返回顶部";      } else {        $navTotop.classList.remove("long");        $percentBtn.textContent = percentage;      }      // 如果当前页面需要瀑布流，就处理瀑布流      if (waterfallDom) {        const waterfallResult = currentTop % document.documentElement.clientHeight; // 卷去一个视口        if (!scrollBottomFirstFlag && waterfallResult + 100 >= document.documentElement.clientHeight) {          console.info(waterfallResult, document.documentElement.clientHeight);          setTimeout(() => {            waterfall("#waterfall");          }, 500);        } else {          setTimeout(() => {            waterfallDom && waterfall("#waterfall");          }, 500);        }      }    }    const scrollTask = anzhiyu.throttle(() => {      const currentTop = window.scrollY || document.documentElement.scrollTop;      const isDown = scrollDirection(currentTop);      const delta = Math.abs(lastScrollTop - currentTop);      if (currentTop > 60 && delta < 20 && delta != 0) {        // ignore small scrolls        return;      }      if (        $popupWindow &&        $popupWindow.classList.contains("show-popup-window") &&        currentTop > 60 &&        delta > 20 &&        lastScrollTop != 0      ) {        // 滚动后延迟1s关闭弹窗        anzhiyu.throttle(() => {          if (popupWindowTimer) clearTimeout(popupWindowTimer);          popupWindowTimer = setTimeout(() => {            if (!$popupWindow.classList.contains("popup-hide")) {              $popupWindow.classList.add("popup-hide");            }            setTimeout(() => {              $popupWindow.classList.remove("popup-hide");              $popupWindow.classList.remove("show-popup-window");            }, 1000);          }, 1000);        }, 1000)();      }      lastScrollTop = currentTop;      if (currentTop > 26) {        if (isDown) {          if ($header.classList.contains("nav-visible")) $header.classList.remove("nav-visible");          if (isChatBtnShow && isChatShow === true) {            chatBtnHide();            isChatShow = false;          }        } else {          if (!$header.classList.contains("nav-visible")) $header.classList.add("nav-visible");          if (isChatBtnHide && isChatShow === false) {            chatBtnShow();            isChatShow = true;          }        }        requestAnimationFrame(() => {          anzhiyu.initThemeColor();          $header.classList.add("nav-fixed");        });        if (window.getComputedStyle($rightside).getPropertyValue("opacity") === "0") {          $rightside.style.cssText = "opacity: 0.8; transform: translateX(-58px)";        }      } else {        if (currentTop <= 5) {          requestAnimationFrame(() => {            $header.classList.remove("nav-fixed");            $header.classList.remove("nav-visible");            // 修改顶栏颜色            anzhiyu.initThemeColor();          });        }        $rightside.style.cssText = "opacity: ''; transform: ''";      }      if (document.body.scrollHeight <= innerHeight) {        $rightside.style.cssText = "opacity: 0.8; transform: translateX(-58px)";      }      percentageScrollFn(currentTop);    }, 96);    // 进入footer隐藏音乐    if (footerDom) {      anzhiyu        .intersectionObserver(          () => {            if (footerDom && musicDom && 768 < document.body.clientWidth) {              musicDom.style.bottom = "-10px";              musicDom.style.opacity = "0";            }            scrollBottomFirstFlag = true;          },          () => {            if (footerDom && musicDom && 768 < document.body.clientWidth) {              musicDom.style.bottom = "20px";              musicDom.style.opacity = "1";            }          }        )()        .observe(footerDom);    }    scrollTask();    anzhiyu.addEventListenerPjax(window, "scroll", scrollTask, { passive: true });  };  /**   * toc,anchor   */  const scrollFnToDo = function () {    const isToc = GLOBAL_CONFIG_SITE.isToc;    const isAnchor = GLOBAL_CONFIG.isAnchor;    const $article = document.getElementById("article-container");    if (!($article && (isToc || isAnchor))) return;    let $tocLink, $cardToc, autoScrollToc, isExpand;    if (isToc) {      const $cardTocLayout = document.getElementById("card-toc");      $cardToc = $cardTocLayout.querySelector(".toc-content");      $tocLink = $cardToc.querySelectorAll(".toc-link");      isExpand = $cardToc.classList.contains("is-expand");      // toc元素點擊      const tocItemClickFn = e => {        const target = e.target.closest(".toc-link");        if (!target) return;        e.preventDefault();        anzhiyu.scrollToDest(          anzhiyu.getEleTop(document.getElementById(decodeURI(target.getAttribute("href")).replace("#", ""))) - 60,          300        );        if (window.innerWidth < 900) {          $cardTocLayout.classList.remove("open");        }      };      anzhiyu.addEventListenerPjax($cardToc, "click", tocItemClickFn);      autoScrollToc = item => {        const activePosition = item.getBoundingClientRect().top;        const sidebarScrollTop = $cardToc.scrollTop;        if (activePosition > document.documentElement.clientHeight - 100) {          $cardToc.scrollTop = sidebarScrollTop + 150;        }        if (activePosition < 100) {          $cardToc.scrollTop = sidebarScrollTop - 150;        }      };    }    // find head position & add active class    const list = $article.querySelectorAll("h1,h2,h3,h4,h5,h6");    const filteredHeadings = Array.from(list).filter(heading => heading.id !== "CrawlerTitle");    let detectItem = "";    const findHeadPosition = function (top) {      if (top === 0) {        return false;      }      let currentId = "";      let currentIndex = "";      filteredHeadings.forEach(function (ele, index) {        if (top > anzhiyu.getEleTop(ele) - 80) {          const id = ele.id;          currentId = id ? "#" + encodeURI(id) : "";          currentIndex = index;        }      });      if (detectItem === currentIndex) return;      if (isAnchor) anzhiyu.updateAnchor(currentId);      detectItem = currentIndex;      if (isToc) {        $cardToc.querySelectorAll(".active").forEach(i => {          i.classList.remove("active");        });        if (currentId === "") {          return;        }        const currentActive = $tocLink[currentIndex];        currentActive.classList.add("active");        setTimeout(() => {          autoScrollToc(currentActive);        }, 0);        if (isExpand) return;        let parent = currentActive.parentNode;        for (; !parent.matches(".toc"); parent = parent.parentNode) {          if (parent.matches("li")) parent.classList.add("active");        }      }    };    // main of scroll    const tocScrollFn = anzhiyu.throttle(() => {      const currentTop = window.scrollY || document.documentElement.scrollTop;      findHeadPosition(currentTop);    }, 100);    anzhiyu.addEventListenerPjax(window, "scroll", tocScrollFn, { passive: true });  };  const handleThemeChange = mode => {    const globalFn = window.globalFn || {};    const themeChange = globalFn.themeChange || {};    if (!themeChange) {      return;    }    Object.keys(themeChange).forEach(key => {      const themeChangeFn = themeChange[key];      themeChangeFn(mode);    });    rm && rm.hideRightMenu();    const menuDarkmodeText = $rightMenu.querySelector(".menu-darkmode-text");    if (mode === "light") {      menuDarkmodeText.textContent = "深色模式";    } else {      menuDarkmodeText.textContent = "浅色模式";    }    if (!GLOBAL_CONFIG_SITE.isPost) {      const root = document.querySelector(":root");      root.style.setProperty("--anzhiyu-bar-background", "var(--anzhiyu-meta-theme-color)");      requestAnimationFrame(() => {        anzhiyu.initThemeColor();      });      // 要改回来默认主色;      document.documentElement.style.setProperty(        "--anzhiyu-main",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-theme")      );      document.documentElement.style.setProperty(        "--anzhiyu-theme-op",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "23"      );      document.documentElement.style.setProperty(        "--anzhiyu-theme-op-deep",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "dd"      );    }  };  /**   * Rightside   */  const rightSideFn = {    readmode: () => {      // read mode      const $body = document.body;      $body.classList.add("read-mode");      const newEle = document.createElement("button");      newEle.type = "button";      newEle.className = "anzhiyufont anzhiyu-icon-xmark exit-readmode";      $body.appendChild(newEle);      const clickFn = () => {        $body.classList.remove("read-mode");        newEle.remove();        newEle.removeEventListener("click", clickFn);      };      newEle.addEventListener("click", clickFn);    },    darkmode: () => {      // switch between light and dark mode      const willChangeMode = document.documentElement.getAttribute("data-theme") === "dark" ? "light" : "dark";      if (willChangeMode === "dark") {        activateDarkMode();        GLOBAL_CONFIG.Snackbar !== undefined && anzhiyu.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night);      } else {        activateLightMode();        GLOBAL_CONFIG.Snackbar !== undefined && anzhiyu.snackbarShow(GLOBAL_CONFIG.Snackbar.night_to_day);      }      saveToLocal.set("theme", willChangeMode, 2);      handleThemeChange(willChangeMode);    },    "rightside-config": item => {      // Show or hide rightside-hide-btn      const hideLayout = item.firstElementChild;      if (hideLayout.classList.contains("show")) {        hideLayout.classList.add("status");        setTimeout(() => {          hideLayout.classList.remove("status");        }, 300);      }      hideLayout.classList.toggle("show");    },    "go-up": () => {      // Back to top      anzhiyu.scrollToDest(0, 500);    },    "hide-aside-btn": () => {      // Hide aside      const $htmlDom = document.documentElement.classList;      const saveStatus = $htmlDom.contains("hide-aside") ? "show" : "hide";      saveToLocal.set("aside-status", saveStatus, 2);      $htmlDom.toggle("hide-aside");    },    "mobile-toc-button": item => {      // Show mobile toc      const tocEle = document.getElementById("card-toc");      tocEle.style.transformOrigin = `right ${item.getBoundingClientRect().top + 17}px`;      tocEle.style.transition = "transform 0.3s ease-in-out";      tocEle.classList.toggle("open");      tocEle.addEventListener(        "transitionend",        () => {          tocEle.style.transition = "";          tocEle.style.transformOrigin = "";        },        { once: true }      );    },    "chat-btn": () => {      // Show chat      window.chatBtnFn();    },    translateLink: () => {      // switch between traditional and simplified chinese      window.translateFn.translatePage();    },  };  document.getElementById("rightside").addEventListener("click", function (e) {    const $target = e.target.closest("[id]");    if ($target && rightSideFn[$target.id]) {      rightSideFn[$target.id](this);    }  });  //监听蒙版关闭  document.addEventListener(    "touchstart",    e => {      anzhiyu.removeRewardMask();    },    { passive: true }  );  /**   * menu   * 側邊欄sub-menu 展開/收縮   */  const clickFnOfSubMenu = () => {    const handleClickOfSubMenu = e => {      const target = e.target.closest(".site-page.group");      if (!target) return;      target.classList.toggle("hide");    };    document.querySelector("#sidebar-menus .menus_items") &&      document.querySelector("#sidebar-menus .menus_items").addEventListener("click", handleClickOfSubMenu);  };  /**   * 手机端目录点击   */  const openMobileMenu = () => {    const handleClick = () => {      sidebarFn.open();    };    anzhiyu.addEventListenerPjax(document.getElementById("toggle-menu"), "click", handleClick);  };  /**   * 複製時加上版權信息   */  const addCopyright = () => {    const { limitCount, languages, copy, copyrightEbable } = GLOBAL_CONFIG.copyright;    const handleCopy = e => {      if (copy) {        anzhiyu.snackbarShow(languages.copySuccess);      }      if (copyrightEbable) {        e.preventDefault();        const copyFont = window.getSelection(0).toString();        let textFont = copyFont;        if (copyFont.length > limitCount) {          textFont = `${copyFont}\n\n\n${languages.author}\n${languages.link}${window.location.href}\n${languages.source}\n${languages.info}`;        }        if (e.clipboardData) {          return e.clipboardData.setData("text", textFont);        } else {          return window.clipboardData.setData("text", textFont);        }      }    };    document.body.addEventListener("copy", handleCopy);  };  /**   * 網頁運行時間   */  const addRuntime = () => {    const $runtimeCount = document.getElementById("runtimeshow");    if ($runtimeCount) {      const publishDate = $runtimeCount.getAttribute("data-publishDate");      $runtimeCount.textContent = `${anzhiyu.diffDate(publishDate)} ${GLOBAL_CONFIG.runtime}`;    }  };  /**   * 最後一次更新時間   */  const addLastPushDate = () => {    const $lastPushDateItem = document.getElementById("last-push-date");    if ($lastPushDateItem) {      const lastPushDate = $lastPushDateItem.getAttribute("data-lastPushDate");      $lastPushDateItem.textContent = anzhiyu.diffDate(lastPushDate, true);    }  };  /**   * table overflow   */  const addTableWrap = () => {    const $table = document.querySelectorAll("#article-container table");    if (!$table.length) return;    $table.forEach(item => {      if (!item.closest(".highlight")) {        anzhiyu.wrap(item, "div", { class: "table-wrap" });      }    });  };  /**   * tag-hide   */  const clickFnOfTagHide = () => {    const hideButtons = document.querySelectorAll("#article-container .hide-button");    if (!hideButtons.length) return;    const handleClick = function (e) {      const $this = this;      $this.classList.add("open");      const $fjGallery = $this.nextElementSibling.querySelectorAll(".gallery-container");      $fjGallery.length && addJustifiedGallery($fjGallery);    };    hideButtons.forEach(item => {      item.addEventListener("click", handleClick, { once: true });    });  };  const tabsFn = () => {    const navTabsElement = document.querySelectorAll("#article-container .tabs");    if (!navTabsElement.length) return;    const removeAndAddActiveClass = (elements, detect) => {      Array.from(elements).forEach(element => {        element.classList.remove("active");        if (element === detect || element.id === detect) {          element.classList.add("active");        }      });    };    const addTabNavEventListener = (item, isJustifiedGallery) => {      const navClickHandler = function (e) {        const target = e.target.closest("button");        if (target.classList.contains("active")) return;        removeAndAddActiveClass(this.children, target);        this.classList.remove("no-default");        const tabId = target.getAttribute("data-href");        const tabContent = this.nextElementSibling;        removeAndAddActiveClass(tabContent.children, tabId);        if (isJustifiedGallery) {          const $isTabJustifiedGallery = tabContent.querySelectorAll(`#${tabId} .fj-gallery`);          if ($isTabJustifiedGallery.length > 0) {            anzhiyu.initJustifiedGallery($isTabJustifiedGallery);          }        }      };      anzhiyu.addEventListenerPjax(item.firstElementChild, "click", navClickHandler);    };    const addTabToTopEventListener = item => {      const btnClickHandler = e => {        const target = e.target.closest("button");        if (!target) return;        anzhiyu.scrollToDest(anzhiyu.getEleTop(item), 300);      };      anzhiyu.addEventListenerPjax(item.lastElementChild, "click", btnClickHandler);    };    navTabsElement.forEach(item => {      const isJustifiedGallery = !!item.querySelectorAll(".gallery-container");      addTabNavEventListener(item, isJustifiedGallery);      addTabToTopEventListener(item);    });  };  const toggleCardCategory = () => {    const cardCategory = document.querySelector("#aside-cat-list.expandBtn");    if (!cardCategory) return;    const handleToggleBtn = e => {      const target = e.target;      if (target.nodeName === "I") {        e.preventDefault();        target.parentNode.classList.toggle("expand");      }    };    anzhiyu.addEventListenerPjax(cardCategory, "click", handleToggleBtn, true);  };  const switchComments = () => {    const switchBtn = document.getElementById("switch-btn");    if (!switchBtn) return;    let switchDone = false;    const commentContainer = document.getElementById("post-comment");    const handleSwitchBtn = () => {      commentContainer.classList.toggle("move");      if (!switchDone && typeof loadOtherComment === "function") {        switchDone = true;        loadOtherComment();      }    };    anzhiyu.addEventListenerPjax(switchBtn, "click", handleSwitchBtn);  };  const addPostOutdateNotice = function () {    const data = GLOBAL_CONFIG.noticeOutdate;    const diffDay = anzhiyu.diffDate(GLOBAL_CONFIG_SITE.postUpdate);    if (diffDay >= data.limitDay) {      const ele = document.createElement("div");      ele.className = "post-outdate-notice";      ele.textContent = data.messagePrev + " " + diffDay + " " + data.messageNext;      const $targetEle = document.getElementById("article-container");      if (data.position === "top") {        $targetEle.insertBefore(ele, $targetEle.firstChild);      } else {        $targetEle.appendChild(ele);      }    }  };  const lazyloadImg = () => {    window.lazyLoadInstance = new LazyLoad({      elements_selector: "img",      threshold: 0,      data_src: "lazy-src",    });  };  const relativeDate = function (selector) {    selector.forEach(item => {      const timeVal = item.getAttribute("datetime");      item.textContent = anzhiyu.diffDate(timeVal, true);      item.style.display = "inline";    });  };  const mouseleaveHomeCard = function () {    const topGroup = document.querySelector(".topGroup");    if (!topGroup) return;    //首页大卡片恢复显示    topGroup.addEventListener("mouseleave", function () {      document.getElementById("todayCard").classList.remove("hide");      document.getElementById("todayCard").style.zIndex = 1;    });  };  // 表情放大  const owoBig = function () {    let flag = 1, // 设置节流阀      owo_time = "", // 设置计时器      m = 3; // 设置放大倍数    // 创建盒子    let div = document.createElement("div");    // 设置ID    div.id = "owo-big";    // 插入盒子    let body = document.querySelector("body");    body.appendChild(div);    // 监听 post-comment 元素的子元素添加事件    const observer = new MutationObserver(mutations => {      mutations.forEach(mutation => {        const addedNodes = mutation.addedNodes;        // 判断新增的节点中是否包含 OwO-body 类名的元素        for (let i = 0; i < addedNodes.length; i++) {          const node = addedNodes[i];          if (            node.nodeType === Node.ELEMENT_NODE &&            node.classList.contains("OwO-body") &&            !node.classList.contains("comment-barrage")          ) {            const owo_body = node;            // 禁用右键（手机端长按会出现右键菜单，为了体验给禁用掉）            owo_body.addEventListener("contextmenu", e => e.preventDefault());            // 鼠标移入            owo_body.addEventListener("mouseover", handleMouseOver);            // 鼠标移出            owo_body.addEventListener("mouseout", handleMouseOut);          }        }      });    });    // 配置 MutationObserver 选项    const config = { childList: true, subtree: true };    // 开始监听    observer.observe(document.getElementById("post-comment"), config);    function handleMouseOver(e) {      if (e.target.tagName == "IMG" && flag) {        flag = 0;        // 移入100毫秒后显示盒子        owo_time = setTimeout(() => {          let height = e.target.clientHeight * m; // 盒子高          let width = e.target.clientWidth * m; // 盒子宽          let left = e.x - e.offsetX - (width - e.target.clientWidth) / 2; // 盒子与屏幕左边距离          if (left + width > body.clientWidth) {            left -= left + width - body.clientWidth + 10;          } // 右边缘检测，防止超出屏幕          if (left < 0) left = 10; // 左边缘检测，防止超出屏幕          let top = e.y - e.offsetY; // 盒子与屏幕顶部距离          // 设置盒子样式          div.style.height = height + "px";          div.style.width = width + "px";          div.style.left = left + "px";          div.style.top = top + "px";          div.style.display = "flex";          // 在盒子中插入图片          div.innerHTML = `<img src="${e.target.src}">`;        }, 100);      }    }    function handleMouseOut(e) {      // 隐藏盒子      div.style.display = "none";      flag = 1;      clearTimeout(owo_time);    }  };  //封面纯色  const coverColor = async () => {    const root = document.querySelector(":root");    const path = document.getElementById("post-top-bg")?.src;    if (!path) {      // 非文章情况，直接设置不需要请求了      root.style.setProperty("--anzhiyu-bar-background", "var(--anzhiyu-meta-theme-color)");      requestAnimationFrame(() => {        anzhiyu.initThemeColor();      });      // 要改回来默认主色      document.documentElement.style.setProperty(        "--anzhiyu-main",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-theme")      );      document.documentElement.style.setProperty(        "--anzhiyu-theme-op",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "23"      );      document.documentElement.style.setProperty(        "--anzhiyu-theme-op-deep",        getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "dd"      );      return;    }    // 文章内    if (GLOBAL_CONFIG.mainTone) {      if (GLOBAL_CONFIG_SITE.postMainColor) {        let value = GLOBAL_CONFIG_SITE.postMainColor;        if (getContrastYIQ(value) === "light") {          value = LightenDarkenColor(colorHex(value), -40);        }        root.style.setProperty("--anzhiyu-bar-background", value);        requestAnimationFrame(() => {          anzhiyu.initThemeColor();        });        if (GLOBAL_CONFIG.mainTone.cover_change) {          document.documentElement.style.setProperty("--anzhiyu-main", value);          document.documentElement.style.setProperty(            "--anzhiyu-theme-op",            getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "23"          );          document.documentElement.style.setProperty(            "--anzhiyu-theme-op-deep",            getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "dd"          );        }      } else {        const fallbackValue = "var(--anzhiyu-theme)";        let fetchPath = "";        if (GLOBAL_CONFIG.mainTone.mode == "cdn" || GLOBAL_CONFIG.mainTone.mode == "both") {          fetchPath = path + "?imageAve";        } else if (GLOBAL_CONFIG.mainTone.mode == "api") {          fetchPath = GLOBAL_CONFIG.mainTone.api + path;        }        // cdn/api模式请求        try {          const response = await fetch(fetchPath);          if (response.ok && response.headers.get("content-type")?.includes("application/json")) {            const obj = await response.json();            let value =              GLOBAL_CONFIG.mainTone.mode == "cdn" || GLOBAL_CONFIG.mainTone.mode == "both"                ? "#" + obj.RGB.slice(2)                : obj.RGB;            if (getContrastYIQ(value) === "light") {              value = LightenDarkenColor(colorHex(value), -40);            }            root.style.setProperty("--anzhiyu-bar-background", value);            requestAnimationFrame(() => {              anzhiyu.initThemeColor();            });            if (GLOBAL_CONFIG.mainTone.cover_change) {              document.documentElement.style.setProperty("--anzhiyu-main", value);              document.documentElement.style.setProperty(                "--anzhiyu-theme-op",                getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "23"              );              document.documentElement.style.setProperty(                "--anzhiyu-theme-op-deep",                getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "dd"              );            }          } else {            if (GLOBAL_CONFIG.mainTone.mode == "both") {              // both继续请求              try {                const response = await fetch(GLOBAL_CONFIG.mainTone.api + path);                if (response.ok && response.headers.get("content-type")?.includes("application/json")) {                  const obj = await response.json();                  let value = obj.RGB;                  if (getContrastYIQ(value) === "light") {                    value = LightenDarkenColor(colorHex(value), -40);                  }                  root.style.setProperty("--anzhiyu-bar-background", value);                  requestAnimationFrame(() => {                    anzhiyu.initThemeColor();                  });                  if (GLOBAL_CONFIG.mainTone.cover_change) {                    document.documentElement.style.setProperty("--anzhiyu-main", value);                    document.documentElement.style.setProperty(                      "--anzhiyu-theme-op",                      getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "23"                    );                    document.documentElement.style.setProperty(                      "--anzhiyu-theme-op-deep",                      getComputedStyle(document.documentElement).getPropertyValue("--anzhiyu-main") + "dd"                    );                  }                } else {                  root.style.setProperty("--anzhiyu-bar-background", fallbackValue);                  requestAnimationFrame(() => {                    anzhiyu.initThemeColor();                  });                  document.documentElement.style.setProperty("--anzhiyu-main", fallbackValue);                }              } catch {                root.style.setProperty("--anzhiyu-bar-background", fallbackValue);                requestAnimationFrame(() => {                  anzhiyu.initThemeColor();                });                document.documentElement.style.setProperty("--anzhiyu-main", fallbackValue);              }            } else {              root.style.setProperty("--anzhiyu-bar-background", fallbackValue);              requestAnimationFrame(() => {                anzhiyu.initThemeColor();              });              document.documentElement.style.setProperty("--anzhiyu-main", fallbackValue);            }          }        } catch (err) {          console.error("Error fetching data:", err);          root.style.setProperty("--anzhiyu-bar-background", fallbackValue);          requestAnimationFrame(() => {            anzhiyu.initThemeColor();          });          document.documentElement.style.setProperty("--anzhiyu-main", fallbackValue);        }      }    }  };  //RGB颜色转化为16进制颜色  const colorHex = str => {    const hexRegex = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;    if (/^(rgb|RGB)/.test(str)) {      const aColor = str.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");      return aColor.reduce((acc, val) => {        const hex = Number(val).toString(16).padStart(2, "0");        return acc + hex;      }, "#");    }    if (hexRegex.test(str)) {      if (str.length === 4) {        return Array.from(str.slice(1)).reduce((acc, val) => acc + val + val, "#");      }      return str;    }    return str;  };  // Lighten or darken a color  const LightenDarkenColor = (col, amt) => {    const usePound = col.startsWith("#");    if (usePound) {      col = col.slice(1);    }    let num = parseInt(col, 16);    const processColor = (colorValue, amount) => {      colorValue += amount;      return colorValue > 255 ? 255 : colorValue < 0 ? 0 : colorValue;    };    const r = processColor(num >> 16, amt);    const b = processColor((num >> 8) & 0x00ff, amt);    const g = processColor(num & 0x0000ff, amt);    return (usePound ? "#" : "") + String("000000" + (g | (b << 8) | (r << 16)).toString(16)).slice(-6);  };  // Determine whether a color is light or dark  const getContrastYIQ = hexcolor => {    const colorRgb = color => {      const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;      color = color.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);      return result ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` : null;    };    const colorrgb = colorRgb(hexcolor);    const colors = colorrgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);    const [_, red, green, blue] = colors;    const brightness = (red * 299 + green * 587 + blue * 114) / 255000;    return brightness >= 0.5 ? "light" : "dark";  };  //监听跳转页面输入框是否按下回车  const listenToPageInputPress = function () {    var input = document.getElementById("toPageText");    if (input) {      input.addEventListener("keydown", event => {        if (event.keyCode === 13) {          // 如果按下的是回车键，则执行特定的函数          anzhiyu.toPage();          var link = document.getElementById("toPageButton");          var href = link.href;          pjax.loadUrl(href);        }      });    }  };  // 监听nav是否被其他音频暂停⏸️  const listenNavMusicPause = function () {    const timer = setInterval(() => {      if (navMusicEl && navMusicEl.querySelector("#nav-music meting-js").aplayer) {        clearInterval(timer);        let msgPlay = '<i class="anzhiyufont anzhiyu-icon-play"></i><span>播放音乐</span>';        let msgPause = '<i class="anzhiyufont anzhiyu-icon-pause"></i><span>暂停音乐</span>';        navMusicEl.querySelector("#nav-music meting-js").aplayer.on("pause", function () {          navMusicEl.classList.remove("playing");          document.getElementById("menu-music-toggle").innerHTML = msgPlay;          document.getElementById("nav-music-hoverTips").innerHTML = "音乐已暂停";          document.querySelector("#consoleMusic").classList.remove("on");          anzhiyu_musicPlaying = false;          navMusicEl.classList.remove("stretch");        });        navMusicEl.querySelector("#nav-music meting-js").aplayer.on("play", function () {          navMusicEl.classList.add("playing");          document.getElementById("menu-music-toggle").innerHTML = msgPause;          document.querySelector("#consoleMusic").classList.add("on");          anzhiyu_musicPlaying = true;          // navMusicEl.classList.add("stretch");        });      }    }, 16);  };  // 开发者工具键盘监听  window.onkeydown = function (e) {    123 === e.keyCode && anzhiyu.snackbarShow("开发者模式已打开，请遵循GPL协议", !1);  };  // 欢迎语  function greetingInit() {    const greetingBoxInfo = GLOBAL_CONFIG.greetingBox.list;    const greetingBoxDefault = GLOBAL_CONFIG.greetingBox.default;    //- 创建盒子    let div = document.createElement("div");    //- 设置ID    div.id = "greeting";    //- 设置class    setTimeout(() => {      div.classList.add("shown");    }, 1000);    //- 插入盒子    let greetingBox = document.getElementById("greetingBox");    if (!greetingBox) return;    greetingBox.appendChild(div);    const nowTime = new Date().getHours();    let greetings = greetingBoxDefault;    for (let i = 0; i < greetingBoxInfo.length; i++) {      if (nowTime >= greetingBoxInfo[i].startTime && nowTime <= greetingBoxInfo[i].endTime) {        greetings = greetingBoxInfo[i].greeting;        break;      }    }    div.innerHTML = greetings;    setTimeout(() => {      div.classList.remove("shown");      setTimeout(() => {        greetingBox.remove();      }, 500);    }, 3000);  }  function statistics51aInit() {    const loadScript = (url, charset = "UTF-8", crossorigin, id) => {      return new Promise((resolve, reject) => {        const script = document.createElement("script");        script.src = url;        script.async = true;        if (id) {          script.setAttribute("id", id);        }        if (charset) {          script.setAttribute("charset", charset);        }        if (crossorigin) {          script.setAttribute("crossorigin", crossorigin);        }        script.onerror = reject;        script.onload = script.onreadystatechange = function () {          const loadState = this.readyState;          if (loadState && loadState !== "loaded" && loadState !== "complete") return;          script.onload = script.onreadystatechange = null;          resolve();        };        document.head.appendChild(script);      });    };    const scriptUrls = [      { url: "https://sdk.51.la/js-sdk-pro.min.js", charset: "UTF-8", crossorigin: false, id: "LA_COLLECT" },      { url: "https://sdk.51.la/perf/js-sdk-perf.min.js", crossorigin: "anonymous" },    ];    Promise.all(scriptUrls.map(({ url, charset, crossorigin, id }) => loadScript(url, charset, crossorigin, id)))      .then(() => {        LA.init({ id: GLOBAL_CONFIG.LA51.ck, ck: GLOBAL_CONFIG.LA51.ck });        new LingQue.Monitor().init({ id: GLOBAL_CONFIG.LA51.LingQueMonitorID, sendSuspicious: true });      })      .catch(error => {        console.error("加载51a统计异常，本地加载403是正常情况:", error);      });  }  function setInputFocusListener() {    const inputs = document.querySelectorAll("input, textarea");    const filteredinputs = Array.from(inputs).filter(heading => {      if (heading.id !== "center-console" || heading.id !== "page-type") {        return;      }    });    filteredinputs.forEach(input => {      input.addEventListener("focus", () => {        anzhiyu_intype = true;      });      input.addEventListener("blur", () => {        anzhiyu_intype = false;      });    });  }  // 是否开启快捷键  function executeShortcutKeyFunction() {    // 是否开启快捷键    anzhiyu_keyboard = localStorage.getItem("keyboardToggle") ? localStorage.getItem("keyboardToggle") : false;    function addKeyShotListener() {      const windowObject = window;      windowObject.removeEventListener("keydown", keyDownEvent);      windowObject.removeEventListener("keyup", keyUpEvent);      windowObject.addEventListener("keydown", keyDownEvent);      windowObject.addEventListener("keyup", keyUpEvent);    }    function keyDownEvent(event) {      const isEscapeKeyPressed = event.keyCode === 27;      const isShiftKeyPressed = event.shiftKey;      const isKeyboardEnabled = anzhiyu_keyboard;      const isInInputField = anzhiyu_intype;      if (isEscapeKeyPressed) {        anzhiyu.hideLoading();        anzhiyu.hideConsole();        rm && rm.hideRightMenu();      }      const shortcutKeyDelay = GLOBAL_CONFIG.shortcutKey.delay ? GLOBAL_CONFIG.shortcutKey.delay : 100;      const shortcutKeyShiftDelay = GLOBAL_CONFIG.shortcutKey.shiftDelay ? GLOBAL_CONFIG.shortcutKey.shiftDelay : 200;      if (isKeyboardEnabled && isShiftKeyPressed && !isInInputField) {        anzhiyu_keyUpShiftDelayEvent_timeoutId = setTimeout(() => {          switch (event.keyCode) {            case 16:              anzhiyu_keyUpEvent_timeoutId = setTimeout(() => {                document.querySelector("#keyboard-tips").classList.add("show");              }, shortcutKeyShiftDelay);              break;            case 65:              anzhiyu.switchConsole();              break;            case 77:              anzhiyu.musicToggle();              break;            case 75:              anzhiyu.keyboardToggle();              break;            case 73:              anzhiyu.rightMenuToggle();              break;            case 82:              toRandomPost();              break;            case 72:              pjax.loadUrl("/");              break;            case 68:              rightSideFn.darkmode();              break;            case 70:              pjax.loadUrl("/fcircle/");              break;            case 76:              pjax.loadUrl("/link/");              break;            case 80:              pjax.loadUrl("/about/");              break;            default:              break;          }          event.preventDefault();        }, shortcutKeyDelay);      }    }    window.onfocus = function () {      document.getElementById("keyboard-tips").classList.remove("show");    };    function keyUpEvent(event) {      anzhiyu_keyUpEvent_timeoutId && clearTimeout(anzhiyu_keyUpEvent_timeoutId);      anzhiyu_keyUpShiftDelayEvent_timeoutId && clearTimeout(anzhiyu_keyUpShiftDelayEvent_timeoutId);      if (event.keyCode === 16) {        const keyboardTips = document.querySelector("#keyboard-tips");        keyboardTips.classList.remove("show");      }    }    addKeyShotListener();  }  function changeDocumentTitle() {    let leaveTitle = GLOBAL_CONFIG.diytitle.leaveTitle;    let backTitle = GLOBAL_CONFIG.diytitle.backTitle;    let OriginTitile = document.title;    let titleTime;    document.addEventListener("visibilitychange", function () {      if (document.hidden) {        //离开当前页面时标签显示内容        document.title = leaveTitle;        clearTimeout(titleTime);      } else {        //返回当前页面时标签显示内容        document.title = backTitle + OriginTitile;        //两秒后变回正常标题        titleTime = setTimeout(function () {          document.title = OriginTitile;        }, 2000);      }    });  }  function addDarkModeEventListener(elementId, childSelector) {    const element = document.getElementById(elementId);    if (element && childSelector) {      const childElement = element.querySelector(childSelector);      childElement && childElement.addEventListener("click", rightSideFn.darkmode);    } else if (element) {      element.addEventListener("click", rightSideFn.darkmode);    }  }  const unRefreshFn = function () {    window.addEventListener("resize", () => {      adjustMenu(false);      mobileSidebarOpen && anzhiyu.isHidden(document.getElementById("toggle-menu")) && sidebarFn.close();    });    document.getElementById("menu-mask").addEventListener("click", e => {      sidebarFn.close();    });    // 处理右键    $rightMenu = document.getElementById("rightMenu");    addDarkModeEventListener("menu-darkmode");    addDarkModeEventListener("sidebar", ".darkmode_switchbutton");    clickFnOfSubMenu();    GLOBAL_CONFIG.islazyload && lazyloadImg();    GLOBAL_CONFIG.copyright !== undefined && addCopyright();    GLOBAL_CONFIG.navMusic && listenNavMusicPause();    if (GLOBAL_CONFIG.shortcutKey && document.getElementById("consoleKeyboard")) {      localStorage.setItem("keyboardToggle", "true");      document.getElementById("consoleKeyboard").classList.add("on");      anzhiyu_keyboard = true;      executeShortcutKeyFunction();    }    if (GLOBAL_CONFIG.autoDarkmode) {      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", e => {        if (saveToLocal.get("theme") !== undefined) return;        e.matches ? handleThemeChange("dark") : handleThemeChange("light");      });    }    // 欢迎语    GLOBAL_CONFIG.greetingBox && greetingInit();    // 51la统计&灵雀统计    GLOBAL_CONFIG.LA51 && statistics51aInit();  };  window.refreshFn = function () {    initAdjust();    themeColorMeta = document.querySelector('meta[name="theme-color"]');    pageHeaderEl = document.getElementById("page-header");    navMusicEl = document.getElementById("nav-music");    consoleEl = document.getElementById("console");    addDarkModeEventListener("console", ".darkmode_switchbutton");    if (GLOBAL_CONFIG_SITE.isPost) {      GLOBAL_CONFIG.noticeOutdate !== undefined && addPostOutdateNotice();      GLOBAL_CONFIG.relativeDate.post && relativeDate(document.querySelectorAll("#post-meta time"));    } else {      if (GLOBAL_CONFIG.relativeDate.homepage) {        relativeDate(document.querySelectorAll("#recent-posts time"));      } else if (GLOBAL_CONFIG.relativeDate.simplehomepage) {        relativeDate(document.querySelectorAll("#recent-posts time"), true);      }      GLOBAL_CONFIG.runtime && addRuntime();      addLastPushDate();      toggleCardCategory();    }    GLOBAL_CONFIG.diytitle && changeDocumentTitle();    scrollFnToDo();    GLOBAL_CONFIG_SITE.isHome && scrollDownInIndex();    addHighlightTool();    GLOBAL_CONFIG.isPhotoFigcaption && addPhotoFigcaption();    scrollFn();    // 刷新时第一次滚动百分比    window.scrollCollect && window.scrollCollect();    const $jgEle = document.querySelectorAll("#content-inner .fj-gallery");    $jgEle.length && runJustifiedGallery($jgEle);    runLightbox();    addTableWrap();    clickFnOfTagHide();    tabsFn();    switchComments();    document.getElementById("toggle-menu").addEventListener("click", () => {      sidebarFn.open();    });    // 如果当前页有评论就执行函数    if (document.getElementById("post-comment")) owoBig();    mouseleaveHomeCard();    coverColor();    listenToPageInputPress();    openMobileMenu();    // needRefresh    // nav中间的标题变化    document.getElementById("page-name").innerText = document.title.split(` | ${GLOBAL_CONFIG_SITE.configTitle}`)[0];    anzhiyu.initIndexEssay();    anzhiyu.changeTimeInEssay();    anzhiyu.removeBodyPaceClass();    anzhiyu.qrcodeCreate();    anzhiyu.changeTimeInAlbumDetail();    anzhiyu.reflashEssayWaterFall();    anzhiyu.sayhi();    anzhiyu.stopImgRightDrag();    anzhiyu.addNavBackgroundInit();    anzhiyu.setValueToBodyType();    anzhiyu.catalogActive();    anzhiyu.tagsPageActive();    anzhiyu.categoriesBarActive();    anzhiyu.topCategoriesBarScroll();    anzhiyu.switchRightClickMenuHotReview();    anzhiyu.getCustomPlayList();    anzhiyu.addEventListenerConsoleMusicList(false);    anzhiyu.initPaginationObserver();    setTimeout(() => {      setInputFocusListener();      if (typeof addFriendLinksInFooter === "function") {        addFriendLinksInFooter();      }    }, 200);  };  refreshFn();  unRefreshFn();});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/tw_cn.js"/>
      <url>/js/tw_cn.js</url>
      
        <content type="html"><![CDATA[document.addEventListener('DOMContentLoaded', function () {  const { defaultEncoding, translateDelay, msgToTraditionalChinese, msgToSimplifiedChinese } = GLOBAL_CONFIG.translate  const snackbarData = GLOBAL_CONFIG.Snackbar  let currentEncoding = defaultEncoding  const targetEncodingCookie = 'translate-chn-cht'  let targetEncoding =    saveToLocal.get(targetEncodingCookie) === undefined      ? defaultEncoding      : Number(saveToLocal.get('translate-chn-cht'))  let translateButtonObject, translateRightMenuButtonObject;  const isSnackbar = snackbarData !== undefined  function setLang () {    document.documentElement.lang = targetEncoding === 1 ? 'zh-TW' : 'zh-CN'  }  function translateText (txt) {    if (txt === '' || txt == null) return ''    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)    else if (currentEncoding === 2 && targetEncoding === 1) {      return Traditionalized(txt)    } else return txt  }  function translateBody (fobj) {    let objs    if (typeof fobj === 'object') objs = fobj.childNodes    else objs = document.body.childNodes    for (let i = 0; i < objs.length; i++) {      const obj = objs.item(i)      if (        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||        obj === translateButtonObject      ) {        continue      }      if (obj.title !== '' && obj.title != null) {        obj.title = translateText(obj.title)      }      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)      if (obj.placeholder !== '' && obj.placeholder != null) { obj.placeholder = translateText(obj.placeholder) }      if (        obj.tagName === 'INPUT' &&        obj.value !== '' &&        obj.type !== 'text' &&        obj.type !== 'hidden'      ) {        obj.value = translateText(obj.value)      }      if (obj.nodeType === 3) obj.data = translateText(obj.data)      else translateBody(obj)    }  }  function translatePage () {    if (targetEncoding === 1) {      currentEncoding = 1      targetEncoding = 2      translateButtonObject.textContent = msgToTraditionalChinese      isSnackbar && anzhiyu.snackbarShow(snackbarData.cht_to_chs)    } else if (targetEncoding === 2) {      currentEncoding = 2      targetEncoding = 1      translateButtonObject.textContent = msgToSimplifiedChinese      isSnackbar && anzhiyu.snackbarShow(snackbarData.chs_to_cht)    }    saveToLocal.set(targetEncodingCookie, targetEncoding, 2)    setLang()    translateBody()  }  function JTPYStr () {    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾龙历志制一台皋准复猛钟注范签'  }  function FTPYStr () {    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽龍歷誌製壹臺臯準復勐鐘註範籤'  }  function Traditionalized (cc) {    let str = ''    const ss = JTPYStr()    const tt = FTPYStr()    for (let i = 0; i < cc.length; i++) {      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) {        str += tt.charAt(ss.indexOf(cc.charAt(i)))      } else str += cc.charAt(i)    }    return str  }  function Simplized (cc) {    let str = ''    const ss = JTPYStr()    const tt = FTPYStr()    for (let i = 0; i < cc.length; i++) {      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) {        str += ss.charAt(tt.indexOf(cc.charAt(i)))      } else str += cc.charAt(i)    }    return str  }  function translateInitialization() {    translateButtonObject = document.getElementById('translateLink');    translateRightMenuButtonObject = document.getElementById('menu-translate').querySelector('span');    if (translateButtonObject || translateRightMenuButtonObject) {      if (currentEncoding !== targetEncoding) {        const textContent = targetEncoding === 1 ? msgToSimplifiedChinese : msgToTraditionalChinese;        if (translateButtonObject) {          translateButtonObject.textContent = textContent;        }          if (translateRightMenuButtonObject) {          translateRightMenuButtonObject.textContent = textContent;        }          setLang();        setTimeout(translateBody, translateDelay);      }    }  }  window.translateFn = {    translatePage,    Traditionalized,    Simplized  }  translateInitialization()  document.addEventListener('pjax:complete', translateInitialization)})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/utils.js"/>
      <url>/js/utils.js</url>
      
        <content type="html"><![CDATA[const anzhiyu = {  debounce: (func, wait = 0, immediate = false) => {    let timeout;    return (...args) => {      const later = () => {        timeout = null;        if (!immediate) func(...args);      };      const callNow = immediate && !timeout;      clearTimeout(timeout);      timeout = setTimeout(later, wait);      if (callNow) func(...args);    };  },  throttle: function (func, wait, options = {}) {    let timeout, context, args;    let previous = 0;    const later = () => {      previous = options.leading === false ? 0 : new Date().getTime();      timeout = null;      func.apply(context, args);      if (!timeout) context = args = null;    };    const throttled = (...params) => {      const now = new Date().getTime();      if (!previous && options.leading === false) previous = now;      const remaining = wait - (now - previous);      context = this;      args = params;      if (remaining <= 0 || remaining > wait) {        if (timeout) {          clearTimeout(timeout);          timeout = null;        }        previous = now;        func.apply(context, args);        if (!timeout) context = args = null;      } else if (!timeout && options.trailing !== false) {        timeout = setTimeout(later, remaining);      }    };    return throttled;  },  sidebarPaddingR: () => {    const innerWidth = window.innerWidth;    const clientWidth = document.body.clientWidth;    const paddingRight = innerWidth - clientWidth;    if (innerWidth !== clientWidth) {      document.body.style.paddingRight = paddingRight + "px";    }  },  snackbarShow: (text, showActionFunction = false, duration = 2000, actionText = false) => {    const { position, bgLight, bgDark } = GLOBAL_CONFIG.Snackbar;    const bg = document.documentElement.getAttribute("data-theme") === "light" ? bgLight : bgDark;    const root = document.querySelector(":root");    root.style.setProperty("--anzhiyu-snackbar-time", duration + "ms");    Snackbar.show({      text: text,      backgroundColor: bg,      onActionClick: showActionFunction,      actionText: actionText,      showAction: actionText,      duration: duration,      pos: position,      customClass: "snackbar-css",    });  },  loadComment: (dom, callback) => {    if ("IntersectionObserver" in window) {      const observerItem = new IntersectionObserver(        entries => {          if (entries[0].isIntersecting) {            callback();            observerItem.disconnect();          }        },        { threshold: [0] }      );      observerItem.observe(dom);    } else {      callback();    }  },  scrollToDest: (pos, time = 500) => {    const currentPos = window.pageYOffset;    if ("scrollBehavior" in document.documentElement.style) {      window.scrollTo({        top: pos,        behavior: "smooth",      });      return;    }    let start = null;    pos = +pos;    window.requestAnimationFrame(function step(currentTime) {      start = !start ? currentTime : start;      const progress = currentTime - start;      if (currentPos < pos) {        window.scrollTo(0, ((pos - currentPos) * progress) / time + currentPos);      } else {        window.scrollTo(0, currentPos - ((currentPos - pos) * progress) / time);      }      if (progress < time) {        window.requestAnimationFrame(step);      } else {        window.scrollTo(0, pos);      }    });  },  initJustifiedGallery: function (selector) {    const runJustifiedGallery = i => {      if (!anzhiyu.isHidden(i)) {        fjGallery(i, {          itemSelector: ".fj-gallery-item",          rowHeight: i.getAttribute("data-rowHeight"),          gutter: 4,          onJustify: function () {            this.$container.style.opacity = "1";          },        });      }    };    if (Array.from(selector).length === 0) runJustifiedGallery(selector);    else      selector.forEach(i => {        runJustifiedGallery(i);      });  },  animateIn: (ele, text) => {    ele.style.display = "block";    ele.style.animation = text;  },  animateOut: (ele, text) => {    ele.addEventListener("animationend", function f() {      ele.style.display = "";      ele.style.animation = "";      ele.removeEventListener("animationend", f);    });    ele.style.animation = text;  },  /**   * @param {*} selector   * @param {*} eleType the type of create element   * @param {*} options object key: value   */  wrap: (selector, eleType, options) => {    const creatEle = document.createElement(eleType);    for (const [key, value] of Object.entries(options)) {      creatEle.setAttribute(key, value);    }    selector.parentNode.insertBefore(creatEle, selector);    creatEle.appendChild(selector);  },  isHidden: ele => ele.offsetHeight === 0 && ele.offsetWidth === 0,  getEleTop: ele => {    let actualTop = ele.offsetTop;    let current = ele.offsetParent;    while (current !== null) {      actualTop += current.offsetTop;      current = current.offsetParent;    }    return actualTop;  },  loadLightbox: ele => {    const service = GLOBAL_CONFIG.lightbox;    if (service === "mediumZoom") {      const zoom = mediumZoom(ele);      zoom.on("open", e => {        const photoBg = document.documentElement.getAttribute("data-theme") === "dark" ? "#121212" : "#fff";        zoom.update({          background: photoBg,        });      });    }    if (service === "fancybox") {      Array.from(ele).forEach(i => {        if (i.parentNode.tagName !== "A") {          const dataSrc = i.dataset.lazySrc || i.src;          const dataCaption = i.title || i.alt || "";          anzhiyu.wrap(i, "a", {            href: dataSrc,            "data-fancybox": "gallery",            "data-caption": dataCaption,            "data-thumb": dataSrc,          });        }      });      if (!window.fancyboxRun) {        Fancybox.bind("[data-fancybox]", {          Hash: false,          Thumbs: {            autoStart: false,          },        });        window.fancyboxRun = true;      }    }  },  setLoading: {    add: ele => {      const html = `        <div class="loading-container">          <div class="loading-item">            <div></div><div></div><div></div><div></div><div></div>          </div>        </div>      `;      ele.insertAdjacentHTML("afterend", html);    },    remove: ele => {      ele.nextElementSibling.remove();    },  },  updateAnchor: anchor => {    if (anchor !== window.location.hash) {      if (!anchor) anchor = location.pathname;      const title = GLOBAL_CONFIG_SITE.title;      window.history.replaceState(        {          url: location.href,          title,        },        title,        anchor      );    }  },  getScrollPercent: (currentTop, ele) => {    const docHeight = ele.clientHeight;    const winHeight = document.documentElement.clientHeight;    const headerHeight = ele.offsetTop;    const contentMath =      docHeight > winHeight ? docHeight - winHeight : document.documentElement.scrollHeight - winHeight;    const scrollPercent = (currentTop - headerHeight) / contentMath;    const scrollPercentRounded = Math.round(scrollPercent * 100);    const percentage = scrollPercentRounded > 100 ? 100 : scrollPercentRounded <= 0 ? 0 : scrollPercentRounded;    return percentage;  },  addGlobalFn: (key, fn, name = false, parent = window) => {    const globalFn = parent.globalFn || {};    const keyObj = globalFn[key] || {};    if (name && keyObj[name]) return;    name = name || Object.keys(keyObj).length;    keyObj[name] = fn;    globalFn[key] = keyObj;    parent.globalFn = globalFn;  },  addEventListenerPjax: (ele, event, fn, option = false) => {    ele.addEventListener(event, fn, option);    anzhiyu.addGlobalFn("pjax", () => {      ele.removeEventListener(event, fn, option);    });  },  removeGlobalFnEvent: (key, parent = window) => {    const { globalFn = {} } = parent;    const keyObj = globalFn[key] || {};    const keyArr = Object.keys(keyObj);    if (!keyArr.length) return;    keyArr.forEach(i => {      keyObj[i]();    });    delete parent.globalFn[key];  },  //更改主题色  changeThemeMetaColor: function (color) {    // console.info(`%c ${color}`, `font-size:36px;color:${color};`);    if (themeColorMeta !== null) {      themeColorMeta.setAttribute("content", color);    }  },  //顶栏自适应主题色  initThemeColor: function () {    let themeColor = getComputedStyle(document.documentElement)      .getPropertyValue("--anzhiyu-bar-background")      .trim()      .replace('"', "")      .replace('"', "");    const currentTop = window.scrollY || document.documentElement.scrollTop;    if (currentTop > 26) {      if (anzhiyu.is_Post()) {        themeColor = getComputedStyle(document.documentElement)          .getPropertyValue("--anzhiyu-meta-theme-post-color")          .trim()          .replace('"', "")          .replace('"', "");      }      if (themeColorMeta.getAttribute("content") === themeColor) return;      this.changeThemeMetaColor(themeColor);    } else {      if (themeColorMeta.getAttribute("content") === themeColor) return;      this.changeThemeMetaColor(themeColor);    }  },  //是否是文章页  is_Post: function () {    var url = window.location.href; //获取url    if (url.indexOf("/posts/") >= 0) {      //判断url地址中是否包含code字符串      return true;    } else {      return false;    }  },  //监测是否在页面开头  addNavBackgroundInit: function () {    var scrollTop = 0,      bodyScrollTop = 0,      documentScrollTop = 0;    if ($bodyWrap) {      bodyScrollTop = $bodyWrap.scrollTop;    }    if (document.documentElement) {      documentScrollTop = document.documentElement.scrollTop;    }    scrollTop = bodyScrollTop - documentScrollTop > 0 ? bodyScrollTop : documentScrollTop;    if (scrollTop != 0) {      pageHeaderEl.classList.add("nav-fixed");      pageHeaderEl.classList.add("nav-visible");    }  },  // 下载图片  downloadImage: function (imgsrc, name) {    //下载图片地址和图片名    rm.hideRightMenu();    if (rm.downloadimging == false) {      rm.downloadimging = true;      anzhiyu.snackbarShow("正在下载中，请稍后", false, 10000);      setTimeout(function () {        let image = new Image();        // 解决跨域 Canvas 污染问题        image.setAttribute("crossOrigin", "anonymous");        image.onload = function () {          let canvas = document.createElement("canvas");          canvas.width = image.width;          canvas.height = image.height;          let context = canvas.getContext("2d");          context.drawImage(image, 0, 0, image.width, image.height);          let url = canvas.toDataURL("image/png"); //得到图片的base64编码数据          let a = document.createElement("a"); // 生成一个a元素          let event = new MouseEvent("click"); // 创建一个单击事件          a.download = name || "photo"; // 设置图片名称          a.href = url; // 将生成的URL设置为a.href属性          a.dispatchEvent(event); // 触发a的单击事件        };        image.src = imgsrc;        anzhiyu.snackbarShow("图片已添加盲水印，请遵守版权协议");        rm.downloadimging = false;      }, "10000");    } else {      anzhiyu.snackbarShow("有正在进行中的下载，请稍后再试");    }  },  //禁止图片右键单击  stopImgRightDrag: function () {    var img = document.getElementsByTagName("img");    for (var i = 0; i < img.length; i++) {      img[i].addEventListener("dragstart", function () {        return false;      });    }  },  //滚动到指定id  scrollTo: function (id) {    var domTop = document.querySelector(id).offsetTop;    window.scrollTo(0, domTop - 80);  },  //隐藏侧边栏  hideAsideBtn: () => {    // Hide aside    const $htmlDom = document.documentElement.classList;    $htmlDom.contains("hide-aside")      ? saveToLocal.set("aside-status", "show", 2)      : saveToLocal.set("aside-status", "hide", 2);    $htmlDom.toggle("hide-aside");    $htmlDom.contains("hide-aside")      ? document.querySelector("#consoleHideAside").classList.add("on")      : document.querySelector("#consoleHideAside").classList.remove("on");  },  // 热评切换  switchCommentBarrage: function () {    let commentBarrage = document.querySelector(".comment-barrage");    if (commentBarrage) {      if (window.getComputedStyle(commentBarrage).display === "flex") {        commentBarrage.style.display = "none";        anzhiyu.snackbarShow("✨ 已关闭评论弹幕");        document.querySelector(".menu-commentBarrage-text").textContent = "显示热评";        document.querySelector("#consoleCommentBarrage").classList.remove("on");        localStorage.setItem("commentBarrageSwitch", "false");      } else {        commentBarrage.style.display = "flex";        document.querySelector(".menu-commentBarrage-text").textContent = "关闭热评";        document.querySelector("#consoleCommentBarrage").classList.add("on");        anzhiyu.snackbarShow("✨ 已开启评论弹幕");        localStorage.removeItem("commentBarrageSwitch");      }    }    rm && rm.hideRightMenu();  },  initPaginationObserver: () => {    const commentElement = document.getElementById("post-comment");    const paginationElement = document.getElementById("pagination");    if (commentElement && paginationElement) {      new IntersectionObserver(entries => {        const commentBarrage = document.querySelector(".comment-barrage");        entries.forEach(entry => {          if (entry.isIntersecting) {            paginationElement.classList.add("show-window");            if (commentBarrage) {              commentBarrage.style.bottom = "-200px";            }          } else {            paginationElement.classList.remove("show-window");            if (commentBarrage) {              commentBarrage.style.bottom = "0px";            }          }        });      }).observe(commentElement);    }  },  // 初始化即刻  initIndexEssay: function () {    if (!document.getElementById("bbTimeList")) return;    setTimeout(() => {      let essay_bar_swiper = new Swiper(".essay_bar_swiper_container", {        passiveListeners: true,        direction: "vertical",        loop: true,        autoplay: {          disableOnInteraction: true,          delay: 3000,        },        mousewheel: true,      });      let essay_bar_comtainer = document.getElementById("bbtalk");      if (essay_bar_comtainer !== null) {        essay_bar_comtainer.onmouseenter = function () {          essay_bar_swiper.autoplay.stop();        };        essay_bar_comtainer.onmouseleave = function () {          essay_bar_swiper.autoplay.start();        };      }    }, 100);  },  scrollByMouseWheel: function ($list, $target) {    const scrollHandler = function (e) {      $list.scrollLeft -= e.wheelDelta / 2;      e.preventDefault();    };    $list.addEventListener("mousewheel", scrollHandler, { passive: false });    if ($target) {      $target.classList.add("selected");      $list.scrollLeft = $target.offsetLeft - $list.offsetLeft - ($list.offsetWidth - $target.offsetWidth) / 2;    }  },  // catalog激活  catalogActive: function () {    const $list = document.getElementById("catalog-list");    if ($list) {      const pathname = decodeURIComponent(window.location.pathname);      const catalogListItems = $list.querySelectorAll(".catalog-list-item");      let $catalog = null;      catalogListItems.forEach(item => {        if (pathname.startsWith(item.id)) {          $catalog = item;          return;        }      });      anzhiyu.scrollByMouseWheel($list, $catalog);    }  },  // Page Tag 激活  tagsPageActive: function () {    const $list = document.getElementById("tag-page-tags");    if ($list) {      const $tagPageTags = document.getElementById(decodeURIComponent(window.location.pathname));      anzhiyu.scrollByMouseWheel($list, $tagPageTags);    }  },  // 修改时间显示"最近"  diffDate: function (d, more = false, simple = false) {    const dateNow = new Date();    const datePost = new Date(d);    const dateDiff = dateNow.getTime() - datePost.getTime();    const minute = 1000 * 60;    const hour = minute * 60;    const day = hour * 24;    const month = day * 30;    let result;    if (more) {      const monthCount = dateDiff / month;      const dayCount = dateDiff / day;      const hourCount = dateDiff / hour;      const minuteCount = dateDiff / minute;      if (monthCount >= 1) {        result = datePost.toLocaleDateString().replace(/\//g, "-");      } else if (dayCount >= 1) {        result = parseInt(dayCount) + " " + GLOBAL_CONFIG.date_suffix.day;      } else if (hourCount >= 1) {        result = parseInt(hourCount) + " " + GLOBAL_CONFIG.date_suffix.hour;      } else if (minuteCount >= 1) {        result = parseInt(minuteCount) + " " + GLOBAL_CONFIG.date_suffix.min;      } else {        result = GLOBAL_CONFIG.date_suffix.just;      }    } else if (simple) {      const monthCount = dateDiff / month;      const dayCount = dateDiff / day;      const hourCount = dateDiff / hour;      const minuteCount = dateDiff / minute;      if (monthCount >= 1) {        result = datePost.toLocaleDateString().replace(/\//g, "-");      } else if (dayCount >= 1 && dayCount <= 3) {        result = parseInt(dayCount) + " " + GLOBAL_CONFIG.date_suffix.day;      } else if (dayCount > 3) {        result = datePost.getMonth() + 1 + "/" + datePost.getDate();      } else if (hourCount >= 1) {        result = parseInt(hourCount) + " " + GLOBAL_CONFIG.date_suffix.hour;      } else if (minuteCount >= 1) {        result = parseInt(minuteCount) + " " + GLOBAL_CONFIG.date_suffix.min;      } else {        result = GLOBAL_CONFIG.date_suffix.just;      }    } else {      result = parseInt(dateDiff / day);    }    return result;  },  // 修改即刻中的时间显示  changeTimeInEssay: function () {    document.querySelector("#bber") &&      document.querySelectorAll("#bber time").forEach(function (e) {        var t = e,          datetime = t.getAttribute("datetime");        (t.innerText = anzhiyu.diffDate(datetime, true)), (t.style.display = "inline");      });  },  // 修改相册集中的时间  changeTimeInAlbumDetail: function () {    document.querySelector("#album_detail") &&      document.querySelectorAll("#album_detail time").forEach(function (e) {        var t = e,          datetime = t.getAttribute("datetime");        (t.innerText = anzhiyu.diffDate(datetime, true)), (t.style.display = "inline");      });  },  // 刷新瀑布流  reflashEssayWaterFall: function () {    const waterfallEl = document.getElementById("waterfall");    if (waterfallEl) {      setTimeout(function () {        waterfall(waterfallEl);        waterfallEl.classList.add("show");      }, 800);    }  },  sayhi: function () {    const $sayhiEl = document.getElementById("author-info__sayhi");    const getTimeState = () => {      const hour = new Date().getHours();      let message = "";      if (hour >= 0 && hour <= 5) {        message = "睡个好觉，保证精力充沛";      } else if (hour > 5 && hour <= 10) {        message = "一日之计在于晨";      } else if (hour > 10 && hour <= 14) {        message = "吃饱了才有力气干活";      } else if (hour > 14 && hour <= 18) {        message = "集中精力，攻克难关";      } else if (hour > 18 && hour <= 24) {        message = "不要太劳累了，早睡更健康";      }      return message;    };    if ($sayhiEl) {      $sayhiEl.innerHTML = getTimeState();    }  },  // 友链注入预设评论  addFriendLink() {    var input = document.getElementsByClassName("el-textarea__inner")[0];    if (!input) return;    const evt = new Event("input", { cancelable: true, bubbles: true });    const defaultPlaceholder =      "昵称（请勿包含博客等字样）：\n网站地址（要求博客地址，请勿提交个人主页）：\n头像图片url（请提供尽可能清晰的图片，我会上传到我自己的图床）：\n描述：\n站点截图（可选）：\n";    input.value = this.getConfigIfPresent(GLOBAL_CONFIG.linkPageTop, "addFriendPlaceholder", defaultPlaceholder);    input.dispatchEvent(evt);    input.focus();    input.setSelectionRange(-1, -1);  },  // 获取配置，如果为空则返回默认值  getConfigIfPresent: function (config, configKey, defaultValue) {    if (!config) return defaultValue;    if (!config.hasOwnProperty(configKey)) return defaultValue;    if (!config[configKey]) return defaultValue;    return config[configKey];  },  //切换音乐播放状态  musicToggle: function (changePaly = true) {    if (!anzhiyu_musicFirst) {      anzhiyu.musicBindEvent();      anzhiyu_musicFirst = true;    }    let msgPlay = '<i class="anzhiyufont anzhiyu-icon-play"></i><span>播放音乐</span>';    let msgPause = '<i class="anzhiyufont anzhiyu-icon-pause"></i><span>暂停音乐</span>';    if (anzhiyu_musicPlaying) {      navMusicEl.classList.remove("playing");      document.getElementById("menu-music-toggle").innerHTML = msgPlay;      document.getElementById("nav-music-hoverTips").innerHTML = "音乐已暂停";      document.querySelector("#consoleMusic").classList.remove("on");      anzhiyu_musicPlaying = false;      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("playing");      document.getElementById("menu-music-toggle").innerHTML = msgPause;      document.querySelector("#consoleMusic").classList.add("on");      anzhiyu_musicPlaying = true;      navMusicEl.classList.add("stretch");    }    if (changePaly) document.querySelector("#nav-music meting-js").aplayer.toggle();    rm && rm.hideRightMenu();  },  // 音乐伸缩  musicTelescopic: function () {    if (navMusicEl.classList.contains("stretch")) {      navMusicEl.classList.remove("stretch");    } else {      navMusicEl.classList.add("stretch");    }  },  //音乐上一曲  musicSkipBack: function () {    navMusicEl.querySelector("meting-js").aplayer.skipBack();    rm && rm.hideRightMenu();  },  //音乐下一曲  musicSkipForward: function () {    navMusicEl.querySelector("meting-js").aplayer.skipForward();    rm && rm.hideRightMenu();  },  //获取音乐中的名称  musicGetName: function () {    var x = document.querySelector(".aplayer-title");    var arr = [];    for (var i = x.length - 1; i >= 0; i--) {      arr[i] = x[i].innerText;    }    return arr[0];  },  //初始化console图标  initConsoleState: function () {    //初始化隐藏边栏    const $htmlDomClassList = document.documentElement.classList;    $htmlDomClassList.contains("hide-aside")      ? document.querySelector("#consoleHideAside").classList.add("on")      : document.querySelector("#consoleHideAside").classList.remove("on");  },  // 显示打赏中控台  rewardShowConsole: function () {    // 判断是否为赞赏打开控制台    consoleEl.classList.add("reward-show");    anzhiyu.initConsoleState();  },  // 显示中控台  showConsole: function () {    consoleEl.classList.add("show");    anzhiyu.initConsoleState();  },  //隐藏中控台  hideConsole: function () {    if (consoleEl.classList.contains("show")) {      // 如果是一般控制台，就关闭一般控制台      consoleEl.classList.remove("show");    } else if (consoleEl.classList.contains("reward-show")) {      // 如果是打赏控制台，就关闭打赏控制台      consoleEl.classList.remove("reward-show");    }    // 获取center-console元素    const centerConsole = document.getElementById("center-console");    // 检查center-console是否被选中    if (centerConsole.checked) {      // 取消选中状态      centerConsole.checked = false;    }  },  // 取消加载动画  hideLoading: function () {    document.getElementById("loading-box").classList.add("loaded");  },  // 将音乐缓存播放  cacheAndPlayMusic() {    let data = localStorage.getItem("musicData");    if (data) {      data = JSON.parse(data);      const currentTime = new Date().getTime();      if (currentTime - data.timestamp < 24 * 60 * 60 * 1000) {        // 如果缓存的数据没有过期，直接使用        anzhiyu.playMusic(data.songs);        return;      }    }    // 否则重新从服务器获取数据    fetch("/json/music.json")      .then(response => response.json())      .then(songs => {        const cacheData = {          timestamp: new Date().getTime(),          songs: songs,        };        localStorage.setItem("musicData", JSON.stringify(cacheData));        anzhiyu.playMusic(songs);      });  },  // 播放音乐  playMusic(songs) {    const anMusicPage = document.getElementById("anMusic-page");    const metingAplayer = anMusicPage.querySelector("meting-js").aplayer;    const randomIndex = Math.floor(Math.random() * songs.length);    const randomSong = songs[randomIndex];    const allAudios = metingAplayer.list.audios;    if (!selectRandomSong.includes(randomSong.name)) {      // 如果随机到的歌曲已经未被随机到过，就添加进metingAplayer.list      metingAplayer.list.add([randomSong]);      // 播放最后一首(因为是添加到了最后)      metingAplayer.list.switch(allAudios.length);      // 添加到已被随机的歌曲列表      selectRandomSong.push(randomSong.name);    } else {      // 随机到的歌曲已经在播放列表中了      // 直接继续随机直到随机到没有随机过的歌曲，如果全部随机过了就切换到对应的歌曲播放即可      let songFound = false;      while (!songFound) {        const newRandomIndex = Math.floor(Math.random() * songs.length);        const newRandomSong = songs[newRandomIndex];        if (!selectRandomSong.includes(newRandomSong.name)) {          metingAplayer.list.add([newRandomSong]);          metingAplayer.list.switch(allAudios.length);          selectRandomSong.push(newRandomSong.name);          songFound = true;        }        // 如果全部歌曲都已被随机过，跳出循环        if (selectRandomSong.length === songs.length) {          break;        }      }      if (!songFound) {        // 如果全部歌曲都已被随机过，切换到对应的歌曲播放        const palyMusicIndex = allAudios.findIndex(song => song.name === randomSong.name);        if (palyMusicIndex != -1) metingAplayer.list.switch(palyMusicIndex);      }    }    console.info("已随机歌曲：", selectRandomSong, "本次随机歌曲：", randomSong.name);  },  // 音乐节目切换背景  changeMusicBg: function (isChangeBg = true) {    const anMusicBg = document.getElementById("an_music_bg");    if (isChangeBg) {      // player listswitch 会进入此处      const musiccover = document.querySelector("#anMusic-page .aplayer-pic");      anMusicBg.style.backgroundImage = musiccover.style.backgroundImage;    } else {      // 第一次进入，绑定事件，改背景      let timer = setInterval(() => {        const musiccover = document.querySelector("#anMusic-page .aplayer-pic");        // 确保player加载完成        if (musiccover) {          clearInterval(timer);          // 绑定事件          anzhiyu.addEventListenerMusic();          // 确保第一次能够正确替换背景          anzhiyu.changeMusicBg();          // 暂停nav的音乐          if (            document.querySelector("#nav-music meting-js").aplayer &&            !document.querySelector("#nav-music meting-js").aplayer.audio.paused          ) {            anzhiyu.musicToggle();          }        }      }, 100);    }  },  // 获取自定义播放列表  getCustomPlayList: function () {    if (!window.location.pathname.startsWith("/music/")) {      return;    }    const urlParams = new URLSearchParams(window.location.search);    const userId = "8152976493";    const userServer = "netease";    const anMusicPageMeting = document.getElementById("anMusic-page-meting");    if (urlParams.get("id") && urlParams.get("server")) {      const id = urlParams.get("id");      const server = urlParams.get("server");      anMusicPageMeting.innerHTML = `<meting-js id="${id}" server=${server} type="playlist" type="playlist" mutex="true" preload="auto" theme="var(--anzhiyu-main)" order="list" list-max-height="calc(100vh - 169px)!important"></meting-js>`;    } else {      anMusicPageMeting.innerHTML = `<meting-js id="${userId}" server="${userServer}" type="playlist" mutex="true" preload="auto" theme="var(--anzhiyu-main)" order="list" list-max-height="calc(100vh - 169px)!important"></meting-js>`;    }    anzhiyu.changeMusicBg(false);  },  //隐藏今日推荐  hideTodayCard: function () {    if (document.getElementById("todayCard")) {      document.getElementById("todayCard").classList.add("hide");      const topGroup = document.querySelector(".topGroup");      const recentPostItems = topGroup.querySelectorAll(".recent-post-item");      recentPostItems.forEach(item => {        item.style.display = "flex";      });    }  },  // 监听音乐背景改变  addEventListenerMusic: function () {    const anMusicPage = document.getElementById("anMusic-page");    const aplayerIconMenu = anMusicPage.querySelector(".aplayer-info .aplayer-time .aplayer-icon-menu");    const anMusicBtnGetSong = anMusicPage.querySelector("#anMusicBtnGetSong");    const anMusicRefreshBtn = anMusicPage.querySelector("#anMusicRefreshBtn");    const anMusicSwitchingBtn = anMusicPage.querySelector("#anMusicSwitching");    const metingAplayer = anMusicPage.querySelector("meting-js").aplayer;    //初始化音量    metingAplayer.volume(0.8, true);    metingAplayer.on("loadeddata", function () {      anzhiyu.changeMusicBg();    });    aplayerIconMenu.addEventListener("click", function () {      document.getElementById("menu-mask").style.display = "block";      document.getElementById("menu-mask").style.animation = "0.5s ease 0s 1 normal none running to_show";      anMusicPage.querySelector(".aplayer.aplayer-withlist .aplayer-list").style.opacity = "1";    });    function anMusicPageMenuAask() {      if (window.location.pathname != "/music/") {        document.getElementById("menu-mask").removeEventListener("click", anMusicPageMenuAask);        return;      }      anMusicPage.querySelector(".aplayer-list").classList.remove("aplayer-list-hide");    }    document.getElementById("menu-mask").addEventListener("click", anMusicPageMenuAask);    // 监听增加单曲按钮    anMusicBtnGetSong.addEventListener("click", () => {      if (changeMusicListFlag) {        const anMusicPage = document.getElementById("anMusic-page");        const metingAplayer = anMusicPage.querySelector("meting-js").aplayer;        const allAudios = metingAplayer.list.audios;        const randomIndex = Math.floor(Math.random() * allAudios.length);        // 随机播放一首        metingAplayer.list.switch(randomIndex);      } else {        anzhiyu.cacheAndPlayMusic();      }    });    anMusicRefreshBtn.addEventListener("click", () => {      localStorage.removeItem("musicData");      anzhiyu.snackbarShow("已移除相关缓存歌曲");    });    anMusicSwitchingBtn.addEventListener("click", () => {      anzhiyu.changeMusicList();    });    // 默认加载的歌单    if (GLOBAL_CONFIG.music_page_default === "custom") {      anzhiyu.changeMusicList();    }    // 监听键盘事件    //空格控制音乐    document.addEventListener("keydown", function (event) {      //暂停开启音乐      if (event.code === "Space") {        event.preventDefault();        metingAplayer.toggle();      }      //切换下一曲      if (event.keyCode === 39) {        event.preventDefault();        metingAplayer.skipForward();      }      //切换上一曲      if (event.keyCode === 37) {        event.preventDefault();        metingAplayer.skipBack();      }      //增加音量      if (event.keyCode === 38) {        if (musicVolume <= 1) {          musicVolume += 0.1;          metingAplayer.volume(musicVolume, true);        }      }      //减小音量      if (event.keyCode === 40) {        if (musicVolume >= 0) {          musicVolume += -0.1;          metingAplayer.volume(musicVolume, true);        }      }    });  },  // 切换歌单  changeMusicList: async function () {    const anMusicPage = document.getElementById("anMusic-page");    const metingAplayer = anMusicPage.querySelector("meting-js").aplayer;    const currentTime = new Date().getTime();    const cacheData = JSON.parse(localStorage.getItem("musicData")) || { timestamp: 0 };    let songs = [];    if (changeMusicListFlag) {      songs = defaultPlayMusicList;    } else {      // 保存当前默认播放列表，以使下次可以切换回来      defaultPlayMusicList = metingAplayer.list.audios;      // 如果缓存的数据没有过期，直接使用      if (currentTime - cacheData.timestamp < 24 * 60 * 60 * 1000) {        songs = cacheData.songs;      } else {        // 否则重新从服务器获取数据        const response = await fetch("/json/music.json");        songs = await response.json();        cacheData.timestamp = currentTime;        cacheData.songs = songs;        localStorage.setItem("musicData", JSON.stringify(cacheData));      }    }    // 清除当前播放列表并添加新的歌曲    metingAplayer.list.clear();    metingAplayer.list.add(songs);    // 切换标志位    changeMusicListFlag = !changeMusicListFlag;  },  // 控制台音乐列表监听  addEventListenerConsoleMusicList: function () {    const navMusic = document.getElementById("nav-music");    if (!navMusic) return;    navMusic.addEventListener("click", e => {      const aplayerList = navMusic.querySelector(".aplayer-list");      const listBtn = navMusic.querySelector(        "div.aplayer-info > div.aplayer-controller > div.aplayer-time.aplayer-time-narrow > button.aplayer-icon.aplayer-icon-menu svg"      );      if (e.target != listBtn && aplayerList.classList.contains("aplayer-list-hide")) {        aplayerList.classList.remove("aplayer-list-hide");      }    });  },  // 监听按键  toPage: function () {    var toPageText = document.getElementById("toPageText"),      toPageButton = document.getElementById("toPageButton"),      pageNumbers = document.querySelectorAll(".page-number"),      lastPageNumber = Number(pageNumbers[pageNumbers.length - 1].innerHTML),      pageNumber = Number(toPageText.value);    if (!isNaN(pageNumber) && pageNumber >= 1 && Number.isInteger(pageNumber)) {      var url = "/page/" + (pageNumber > lastPageNumber ? lastPageNumber : pageNumber) + "/";      toPageButton.href = pageNumber === 1 ? "/" : url;    } else {      toPageButton.href = "javascript:void(0);";    }  },  //删除多余的class  removeBodyPaceClass: function () {    document.body.className = "pace-done";  },  // 修改body的type类型以适配css  setValueToBodyType: function () {    const input = document.getElementById("page-type"); // 获取input元素    const value = input.value; // 获取input的value值    document.body.dataset.type = value; // 将value值赋值到body的type属性上  },  //匿名评论  addRandomCommentInfo: function () {    // 从形容词数组中随机取一个值    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];    // 从蔬菜水果动物名字数组中随机取一个值    const randomName = vegetablesAndFruits[Math.floor(Math.random() * vegetablesAndFruits.length)];    // 将两个值组合成一个字符串    const name = `${randomAdjective}${randomName}`;    function dr_js_autofill_commentinfos() {      var lauthor = [          "#author",          "input[name='comname']",          "#inpName",          "input[name='author']",          "#ds-dialog-name",          "#name",          "input[name='nick']",          "#comment_author",        ],        lmail = [          "#mail",          "#email",          "input[name='commail']",          "#inpEmail",          "input[name='email']",          "#ds-dialog-email",          "input[name='mail']",          "#comment_email",        ],        lurl = [          "#url",          "input[name='comurl']",          "#inpHomePage",          "#ds-dialog-url",          "input[name='url']",          "input[name='website']",          "#website",          "input[name='link']",          "#comment_url",        ];      for (var i = 0; i < lauthor.length; i++) {        var author = document.querySelector(lauthor[i]);        if (author != null) {          author.value = name;          author.dispatchEvent(new Event("input"));          author.dispatchEvent(new Event("change"));          break;        }      }      for (var j = 0; j < lmail.length; j++) {        var mail = document.querySelector(lmail[j]);        if (mail != null) {          mail.value = visitorMail;          mail.dispatchEvent(new Event("input"));          mail.dispatchEvent(new Event("change"));          break;        }      }      return !1;    }    dr_js_autofill_commentinfos();    var input = document.getElementsByClassName("el-textarea__inner")[0];    input.focus();    input.setSelectionRange(-1, -1);  },  // 跳转开往  totraveling: function () {    anzhiyu.snackbarShow(      "即将跳转到「开往」项目的成员博客，不保证跳转网站的安全性和可用性",      element => {        element.style.opacity = 0;        travellingsTimer && clearTimeout(travellingsTimer);      },      5000,      "取消"    );    travellingsTimer = setTimeout(function () {      window.open("https://www.travellings.cn/go.html", "_blank");    }, "5000");  },  // 工具函数替换字符串  replaceAll: function (e, n, t) {    return e.split(n).join(t);  },  // 音乐绑定事件  musicBindEvent: function () {    document.querySelector("#nav-music .aplayer-music").addEventListener("click", function () {      anzhiyu.musicTelescopic();    });    document.querySelector("#nav-music .aplayer-button").addEventListener("click", function () {      anzhiyu.musicToggle(false);    });  },  // 判断是否是移动端  hasMobile: function () {    let isMobile = false;    if (      navigator.userAgent.match(        /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i      ) ||      document.body.clientWidth < 800    ) {      // 移动端      isMobile = true;    }    return isMobile;  },  // 创建二维码  qrcodeCreate: function () {    if (document.getElementById("qrcode")) {      document.getElementById("qrcode").innerHTML = "";      var qrcode = new QRCode(document.getElementById("qrcode"), {        text: window.location.href,        width: 250,        height: 250,        colorDark: "#000",        colorLight: "#ffffff",        correctLevel: QRCode.CorrectLevel.H,      });    }  },  // 判断是否在el内  isInViewPortOfOne: function (el) {    if (!el) return;    const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;    const offsetTop = el.offsetTop;    const scrollTop = document.documentElement.scrollTop;    const top = offsetTop - scrollTop;    return top <= viewPortHeight;  },  //添加赞赏蒙版  addRewardMask: function () {    if (!document.querySelector(".reward-main")) return;    document.querySelector(".reward-main").style.display = "flex";    document.querySelector(".reward-main").style.zIndex = "102";    document.getElementById("quit-box").style.display = "flex";  },  // 移除赞赏蒙版  removeRewardMask: function () {    if (!document.querySelector(".reward-main")) return;    document.querySelector(".reward-main").style.display = "none";    document.getElementById("quit-box").style.display = "none";  },  keyboardToggle: function () {    const isKeyboardOn = anzhiyu_keyboard;    if (isKeyboardOn) {      const consoleKeyboard = document.querySelector("#consoleKeyboard");      consoleKeyboard.classList.remove("on");      anzhiyu_keyboard = false;    } else {      const consoleKeyboard = document.querySelector("#consoleKeyboard");      consoleKeyboard.classList.add("on");      anzhiyu_keyboard = true;    }    localStorage.setItem("keyboardToggle", isKeyboardOn ? "false" : "true");  },  rightMenuToggle: function () {    if (window.oncontextmenu) {      window.oncontextmenu = null;    } else if (!window.oncontextmenu && oncontextmenuFunction) {      window.oncontextmenu = oncontextmenuFunction;    }  },  switchConsole: () => {    // switch console    const consoleEl = document.getElementById("console");    //初始化隐藏边栏    const $htmlDom = document.documentElement.classList;    $htmlDom.contains("hide-aside")      ? document.querySelector("#consoleHideAside").classList.add("on")      : document.querySelector("#consoleHideAside").classList.remove("on");    if (consoleEl.classList.contains("show")) {      consoleEl.classList.remove("show");    } else {      consoleEl.classList.add("show");    }    const consoleKeyboard = document.querySelector("#consoleKeyboard");    if (consoleKeyboard) {      if (localStorage.getItem("keyboardToggle") === "true") {        consoleKeyboard.classList.add("on");        anzhiyu_keyboard = true;      } else {        consoleKeyboard.classList.remove("on");        anzhiyu_keyboard = false;      }    }  },  // 定义 intersectionObserver 函数，并接收两个可选参数  intersectionObserver: function (enterCallback, leaveCallback) {    let observer;    return () => {      if (!observer) {        observer = new IntersectionObserver(entries => {          entries.forEach(entry => {            if (entry.intersectionRatio > 0) {              enterCallback?.();            } else {              leaveCallback?.();            }          });        });      } else {        // 如果 observer 对象已经存在，则先取消对之前元素的观察        observer.disconnect();      }      return observer;    };  },  // CategoryBar滚动  scrollCategoryBarToRight: function () {    // 获取需要操作的元素    const items = document.getElementById("catalog-list");    const nextButton = document.getElementById("category-bar-next");    // 检查元素是否存在    if (items && nextButton) {      const itemsWidth = items.clientWidth;      // 判断是否已经滚动到最右侧      if (items.scrollLeft + items.clientWidth + 1 >= items.scrollWidth) {        // 滚动到初始位置并更新按钮内容        items.scroll({          left: 0,          behavior: "smooth",        });        nextButton.innerHTML = '<i class="anzhiyufont anzhiyu-icon-angle-double-right"></i>';      } else {        // 滚动到下一个视图        items.scrollBy({          left: itemsWidth,          behavior: "smooth",        });      }    } else {      console.error("Element(s) not found: 'catalog-list' and/or 'category-bar-next'.");    }  },  // 分类条  categoriesBarActive: function () {    const urlinfo = decodeURIComponent(window.location.pathname);    const $categoryBar = document.getElementById("category-bar");    if (!$categoryBar) return;    if (urlinfo === "/") {      $categoryBar.querySelector("#首页").classList.add("select");    } else {      const pattern = /\/categories\/.*?\//;      const patbool = pattern.test(urlinfo);      if (!patbool) return;      const nowCategorie = urlinfo.split("/")[2];      $categoryBar.querySelector(`#${nowCategorie}`).classList.add("select");    }  },  topCategoriesBarScroll: function () {    const $categoryBarItems = document.getElementById("category-bar-items");    if (!$categoryBarItems) return;    $categoryBarItems.addEventListener("mousewheel", function (e) {      const v = -e.wheelDelta / 2;      this.scrollLeft += v;      e.preventDefault();    });  },  // 切换菜单显示热评  switchRightClickMenuHotReview: function () {    const postComment = document.getElementById("post-comment");    const menuCommentBarrageDom = document.getElementById("menu-commentBarrage");    if (postComment) {      menuCommentBarrageDom.style.display = "flex";    } else {      menuCommentBarrageDom.style.display = "none";    }  },  // 切换作者卡片状态文字  changeSayHelloText: function () {    const greetings = GLOBAL_CONFIG.authorStatus.skills;    const authorInfoSayHiElement = document.getElementById("author-info__sayhi");    // 如果只有一个问候语，设置为默认值    if (greetings.length === 1) {      authorInfoSayHiElement.textContent = greetings[0];      return;    }    let lastSayHello = authorInfoSayHiElement.textContent;    let randomGreeting = lastSayHello;    while (randomGreeting === lastSayHello) {      randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];    }    authorInfoSayHiElement.textContent = randomGreeting;  },};const anzhiyuPopupManager = {  queue: [],  processing: false,  Jump: false,  enqueuePopup(title, tip, url, duration = 3000) {    this.queue.push({ title, tip, url, duration });    if (!this.processing) {      this.processQueue();    }  },  processQueue() {    if (this.queue.length > 0 && !this.processing) {      this.processing = true;      const { title, tip, url, duration } = this.queue.shift();      this.popupShow(title, tip, url, duration);    }  },  popupShow(title, tip, url, duration) {    const popupWindow = document.getElementById("popup-window");    if (!popupWindow) return;    const windowTitle = popupWindow.querySelector(".popup-window-title");    const windowContent = popupWindow.querySelector(".popup-window-content");    const cookiesTip = windowContent.querySelector(".popup-tip");    if (popupWindow.classList.contains("show-popup-window")) {      popupWindow.classList.add("popup-hide");    }    // 等待上一个弹窗完全消失    setTimeout(() => {      // 移除之前的点击事件处理程序      popupWindow.removeEventListener("click", this.clickEventHandler);      if (url) {        if (window.pjax) {          this.clickEventHandler = event => {            event.preventDefault();            pjax.loadUrl(url);            popupWindow.classList.remove("show-popup-window");            popupWindow.classList.remove("popup-hide");            this.Jump = true;            // 处理队列中的下一个弹出窗口            this.processing = false;            this.processQueue();          };          popupWindow.addEventListener("click", this.clickEventHandler);        } else {          this.clickEventHandler = () => {            window.location.href = url;          };          popupWindow.addEventListener("click", this.clickEventHandler);        }        if (popupWindow.classList.contains("no-url")) {          popupWindow.classList.remove("no-url");        }      } else {        if (!popupWindow.classList.contains("no-url")) {          popupWindow.classList.add("no-url");        }        this.clickEventHandler = () => {          popupWindow.classList.add("popup-hide");          setTimeout(() => {            popupWindow.classList.remove("popup-hide");            popupWindow.classList.remove("show-popup-window");          }, 1000);        };        popupWindow.addEventListener("click", this.clickEventHandler);      }      if (popupWindow.classList.contains("popup-hide")) {        popupWindow.classList.remove("popup-hide");      }      popupWindow.classList.add("show-popup-window");      windowTitle.textContent = title;      cookiesTip.textContent = tip;    }, 800);    setTimeout(() => {      if (url && !this.Jump) {        this.Jump = false;      }      if (!popupWindow.classList.contains("popup-hide") && popupWindow.className != "") {        popupWindow.classList.add("popup-hide");      }      // 处理队列中的下一个弹出窗口      this.processing = false;      this.processQueue();    }, duration);  },};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/json/music.json"/>
      <url>/json/music.json</url>
      
        <content type="html"><![CDATA[[{"name":"青花瓷","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc"},{"name":"稻香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc"},{"name":"晴天","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc"},{"name":"七里香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc"},{"name":"花海","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc"},{"name":"反方向的钟","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc"},{"name":"兰亭序","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc"},{"name":"说好的辛福呢","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc"},{"name":"等你下课 (with 杨瑞代)","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc"},{"name":"我落泪情绪零碎","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc"},{"name":"听妈妈的话","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc"},{"name":"明明就","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc"},{"name":"我是如此相信","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc"},{"name":"发如雪","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc"},{"name":"以父之名","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc"},{"name":"园游会","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc"},{"name":"本草纲目","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc"},{"name":"龙卷风","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc"}]]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐馆</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>运营模式与责任</title>
      <link href="/omar/index.html"/>
      <url>/omar/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu/ai_abstract.js"/>
      <url>/js/anzhiyu/ai_abstract.js</url>
      
        <content type="html"><![CDATA[(function () {  const {    randomNum,    basicWordCount,    btnLink,    key: AIKey,    Referer: AIReferer,    gptName,    switchBtn,    mode: initialMode,  } = GLOBAL_CONFIG.postHeadAiDescription;  const { title, postAI, pageFillDescription } = GLOBAL_CONFIG_SITE;  let lastAiRandomIndex = -1;  let animationRunning = true;  let mode = initialMode;  let refreshNum = 0;  let prevParam;  let audio = null;  let isPaused = false;  let summaryID = null;  const post_ai = document.querySelector(".post-ai-description");  const aiTitleRefreshIcon = post_ai.querySelector(".ai-title .anzhiyufont.anzhiyu-icon-arrow-rotate-right");  let aiReadAloudIcon = post_ai.querySelector(".anzhiyu-icon-circle-dot");  const explanation = post_ai.querySelector(".ai-explanation");  let aiStr = "";  let aiStrLength = "";  let delayInit = 600;  let indexI = 0;  let indexJ = 0;  let timeouts = [];  let elapsed = 0;  const observer = createIntersectionObserver();  const aiFunctions = [introduce, aiTitleRefreshIconClick, aiRecommend, aiGoHome];  const aiBtnList = post_ai.querySelectorAll(".ai-btn-item");  const filteredHeadings = Array.from(aiBtnList).filter(heading => heading.id !== "go-tianli-blog");  filteredHeadings.forEach((item, index) => {    item.addEventListener("click", () => {      aiFunctions[index]();    });  });  document.getElementById("ai-tag").addEventListener("click", onAiTagClick);  aiTitleRefreshIcon.addEventListener("click", onAiTitleRefreshIconClick);  document.getElementById("go-tianli-blog").addEventListener("click", () => {    window.open(btnLink, "_blank");  });  aiReadAloudIcon.addEventListener("click", readAloud);  async function readAloud() {    if (!summaryID) {      anzhiyu.snackbarShow("摘要还没加载完呢，请稍后。。。");      return;    }    aiReadAloudIcon = post_ai.querySelector(".anzhiyu-icon-circle-dot");    aiReadAloudIcon.style.opacity = "0.2";    if (audio && !isPaused) {      audio.pause();      isPaused = true;      aiReadAloudIcon.style.opacity = "1";      aiReadAloudIcon.style.animation = "";      aiReadAloudIcon.style.cssText = "animation: ''; opacity: 1;cursor: pointer;";      return;    }    if (audio && isPaused) {      audio.play();      isPaused = false;      aiReadAloudIcon.style.cssText = "animation: breathe .5s linear infinite; opacity: 0.2;cursor: pointer";      return;    }    const options = {      key: AIKey,      Referer: AIReferer,    };    const requestParams = new URLSearchParams({      key: options.key,      id: summaryID,    });    const requestOptions = {      method: "GET",      headers: {        "Content-Type": "application/json",        Referer: options.Referer,      },    };    try {      const response = await fetch(`https://summary.tianli0.top/audio?${requestParams}`, requestOptions);      if (response.status === 403) {        console.error("403 refer与key不匹配。");      } else if (response.status === 500) {        console.error("500 系统内部错误");      } else {        const audioBlob = await response.blob();        const audioURL = URL.createObjectURL(audioBlob);        audio = new Audio(audioURL);        audio.play();        aiReadAloudIcon.style.cssText = "animation: breathe .5s linear infinite; opacity: 0.2;cursor: pointer";        audio.addEventListener("ended", () => {          audio = null;          aiReadAloudIcon.style.opacity = "1";          aiReadAloudIcon.style.animation = "";        });      }    } catch (error) {      console.error("请求发生错误❎");    }  }  if (switchBtn) {    document.getElementById("ai-Toggle").addEventListener("click", changeShowMode);  }  aiAbstract();  showAiBtn();  function createIntersectionObserver() {    return new IntersectionObserver(      entries => {        let isVisible = entries[0].isIntersecting;        animationRunning = isVisible;        if (animationRunning) {          delayInit = indexI === 0 ? 200 : 20;          timeouts[1] = setTimeout(() => {            if (indexJ) {              indexI = 0;              indexJ = 0;            }            if (indexI === 0) {              explanation.innerHTML = aiStr.charAt(0);            }            requestAnimationFrame(animate);          }, delayInit);        }      },      { threshold: 0 }    );  }  function animate(timestamp) {    if (!animationRunning) {      return;    }    if (!animate.start) animate.start = timestamp;    elapsed = timestamp - animate.start;    if (elapsed >= 20) {      animate.start = timestamp;      if (indexI < aiStrLength - 1) {        let char = aiStr.charAt(indexI + 1);        let delay = /[,.，。!?！？]/.test(char) ? 150 : 20;        if (explanation.firstElementChild) {          explanation.removeChild(explanation.firstElementChild);        }        explanation.innerHTML += char;        let div = document.createElement("div");        div.className = "ai-cursor";        explanation.appendChild(div);        indexI++;        if (delay === 150) {          post_ai.querySelector(".ai-explanation .ai-cursor").style.opacity = "0.2";        }        if (indexI === aiStrLength - 1) {          observer.disconnect();          explanation.removeChild(explanation.firstElementChild);        }        timeouts[0] = setTimeout(() => {          requestAnimationFrame(animate);        }, delay);      }    } else {      requestAnimationFrame(animate);    }  }  function clearTimeouts() {    if (timeouts.length) {      timeouts.forEach(item => {        if (item) {          clearTimeout(item);        }      });    }  }  function startAI(str, df = true) {    indexI = 0;    indexJ = 1;    clearTimeouts();    animationRunning = false;    elapsed = 0;    observer.disconnect();    explanation.innerHTML = df ? "生成中. . ." : "请等待. . .";    aiStr = str;    aiStrLength = aiStr.length;    observer.observe(post_ai);  }  async function aiAbstract(num = basicWordCount) {    if (mode === "tianli") {      await aiAbstractTianli(num);    } else {      aiAbstractLocal();    }  }  async function aiAbstractTianli(num) {    indexI = 0;    indexJ = 1;    clearTimeouts();    animationRunning = false;    elapsed = 0;    observer.disconnect();    num = Math.max(10, Math.min(2000, num));    const options = {      key: AIKey,      Referer: AIReferer,    };    const truncateDescription = (title + pageFillDescription).trim().substring(0, num);    const requestBody = {      key: options.key,      content: truncateDescription,      url: location.href,    };    const requestOptions = {      method: "POST",      headers: {        "Content-Type": "application/json",        Referer: options.Referer,      },      body: JSON.stringify(requestBody),    };    console.info(truncateDescription.length);    try {      let animationInterval = null;      let summary;      if (animationInterval) clearInterval(animationInterval);      animationInterval = setInterval(() => {        const animationText = "生成中" + ".".repeat(indexJ);        explanation.innerHTML = animationText;        indexJ = (indexJ % 3) + 1;      }, 500);      const response = await fetch(`https://summary.tianli0.top/`, requestOptions);      let result;      if (response.status === 403) {        result = {          summary: "403 refer与key不匹配。",        };      } else if (response.status === 500) {        result = {          summary: "500 系统内部错误",        };      } else {        result = await response.json();      }      summary = result.summary.trim();      summaryID = result.id;      setTimeout(() => {        aiTitleRefreshIcon.style.opacity = "1";      }, 300);      if (summary) {        startAI(summary);      } else {        startAI("摘要获取失败!!!请检查Tianli服务是否正常!!!");      }      clearInterval(animationInterval);    } catch (error) {      console.error(error);      explanation.innerHTML = "发生异常" + error;    }  }  function aiAbstractLocal() {    const strArr = postAI.split(",").map(item => item.trim());    if (strArr.length !== 1) {      let randomIndex = Math.floor(Math.random() * strArr.length);      while (randomIndex === lastAiRandomIndex) {        randomIndex = Math.floor(Math.random() * strArr.length);      }      lastAiRandomIndex = randomIndex;      startAI(strArr[randomIndex]);    } else {      startAI(strArr[0]);    }    setTimeout(() => {      aiTitleRefreshIcon.style.opacity = "1";    }, 600);  }  function aiRecommend() {    indexI = 0;    indexJ = 1;    clearTimeouts();    animationRunning = false;    elapsed = 0;    explanation.innerHTML = "生成中. . .";    aiStr = "";    aiStrLength = "";    observer.disconnect();    timeouts[2] = setTimeout(() => {      explanation.innerHTML = recommendList();    }, 600);  }  function recommendList() {    let thumbnail = document.querySelectorAll(".relatedPosts-list a");    if (!thumbnail.length) {      const cardRecentPost = document.querySelector(".card-widget.card-recent-post");      if (!cardRecentPost) return "";      thumbnail = cardRecentPost.querySelectorAll(".aside-list-item a");      let list = "";      for (let i = 0; i < thumbnail.length; i++) {        const item = thumbnail[i];        list += `<div class="ai-recommend-item"><span class="index">${          i + 1        }：</span><a href="javascript:;" onclick="pjax.loadUrl('${item.href}')" title="${          item.title        }" data-pjax-state="">${item.title}</a></div>`;      }      return `很抱歉，无法找到类似的文章，你也可以看看本站最新发布的文章：<br /><div class="ai-recommend">${list}</div>`;    }    let list = "";    for (let i = 0; i < thumbnail.length; i++) {      const item = thumbnail[i];      list += `<div class="ai-recommend-item"><span>推荐${        i + 1      }：</span><a href="javascript:;" onclick="pjax.loadUrl('${item.href}')" title="${        item.title      }" data-pjax-state="">${item.title}</a></div>`;    }    return `推荐文章：<br /><div class="ai-recommend">${list}</div>`;  }  function aiGoHome() {    startAI("正在前往博客主页...", false);    timeouts[2] = setTimeout(() => {      if (window.pjax) {        pjax.loadUrl("/");      } else {        location.href = location.origin;      }    }, 1000);  }  function introduce() {    if (mode == "tianli") {      startAI("我是文章辅助AI: TianliGPT，点击下方的按钮，让我生成本文简介、推荐相关文章等。");    } else {      startAI(`我是文章辅助AI: ${gptName} GPT，点击下方的按钮，让我生成本文简介、推荐相关文章等。`);    }  }  function aiTitleRefreshIconClick() {    aiTitleRefreshIcon.click();  }  function onAiTagClick() {    if (mode === "tianli") {      post_ai.querySelectorAll(".ai-btn-item").forEach(item => (item.style.display = "none"));      document.getElementById("go-tianli-blog").style.display = "block";      startAI(        "你好，我是Tianli开发的摘要生成助理TianliGPT，是一个基于GPT-4的生成式AI。我在这里只负责摘要的预生成和显示，你无法与我直接沟通，如果你也需要一个这样的AI摘要接口，可以在下方购买。"      );    } else {      post_ai.querySelectorAll(".ai-btn-item").forEach(item => (item.style.display = "block"));      document.getElementById("go-tianli-blog").style.display = "none";      startAI(        `你好，我是本站摘要生成助理${gptName} GPT，是一个基于GPT-4的生成式AI。我在这里只负责摘要的预生成和显示，你无法与我直接沟通。`      );    }  }  function onAiTitleRefreshIconClick() {    const truncateDescription = (title + pageFillDescription).trim().substring(0, basicWordCount);    aiTitleRefreshIcon.style.opacity = "0.2";    aiTitleRefreshIcon.style.transitionDuration = "0.3s";    aiTitleRefreshIcon.style.transform = "rotate(" + 360 * refreshNum + "deg)";    if (truncateDescription.length <= basicWordCount) {      let param = truncateDescription.length - Math.floor(Math.random() * randomNum);      while (param === prevParam || truncateDescription.length - param === prevParam) {        param = truncateDescription.length - Math.floor(Math.random() * randomNum);      }      prevParam = param;      aiAbstract(param);    } else {      let value = Math.floor(Math.random() * randomNum) + basicWordCount;      while (value === prevParam || truncateDescription.length - value === prevParam) {        value = Math.floor(Math.random() * randomNum) + basicWordCount;      }      aiAbstract(value);    }    refreshNum++;  }  function changeShowMode() {    mode = mode === "tianli" ? "local" : "tianli";    if (mode === "tianli") {      document.getElementById("ai-tag").innerHTML = "TianliGPT";      aiReadAloudIcon.style.opacity = "1";      aiReadAloudIcon.style.cursor = "pointer";    } else {      aiReadAloudIcon.style.opacity = "0";      aiReadAloudIcon.style.cursor = "auto";      if ((document.getElementById("go-tianli-blog").style.display = "block")) {        document.querySelectorAll(".ai-btn-item").forEach(item => (item.style.display = "block"));        document.getElementById("go-tianli-blog").style.display = "none";      }      document.getElementById("ai-tag").innerHTML = gptName + " GPT";    }    aiAbstract();  }  function showAiBtn() {    if (mode === "tianli") {      document.getElementById("ai-tag").innerHTML = "TianliGPT";    } else {      document.getElementById("ai-tag").innerHTML = gptName + " GPT";    }  }})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu/comment_barrage.js"/>
      <url>/js/anzhiyu/comment_barrage.js</url>
      
        <content type="html"><![CDATA[if (document.querySelector(".comment-barrage")) {  var commentBarrageConfig = {    maxBarrage: GLOBAL_CONFIG.commentBarrageConfig.maxBarrage,    barrageTime: GLOBAL_CONFIG.commentBarrageConfig.barrageTime,    twikooUrl: GLOBAL_CONFIG.twikooEnvId,    accessToken: GLOBAL_CONFIG.commentBarrageConfig.accessToken,    mailMd5: GLOBAL_CONFIG.commentBarrageConfig.mailMd5,    pageUrl: window.location.pathname,    barrageTimer: [],    barrageList: [],    barrageIndex: 0,    dom: document.querySelector(".comment-barrage"),  };  var commentInterval = null;  var hoverOnCommentBarrage = false;  document.querySelector(".comment-barrage").addEventListener("mouseenter", function () {    hoverOnCommentBarrage = true;  });  document.querySelector(".comment-barrage").addEventListener("mouseleave", function () {    hoverOnCommentBarrage = false;  });  function initCommentBarrage() {    if (!commentBarrageConfig.dom) return;    var data = JSON.stringify({      event: "COMMENT_GET",      "commentBarrageConfig.accessToken": commentBarrageConfig.accessToken,      url: commentBarrageConfig.pageUrl,    });    var xhr = new XMLHttpRequest();    xhr.withCredentials = true;    xhr.addEventListener("readystatechange", function () {      if (this.readyState === 4 && this.responseText) {        commentBarrageConfig.barrageList = commentLinkFilter(JSON.parse(this.responseText).data);        commentBarrageConfig.dom.innerHTML = "";      }    });    xhr.open("POST", commentBarrageConfig.twikooUrl);    xhr.setRequestHeader("Content-Type", "application/json");    xhr.send(data);    clearInterval(commentInterval);    commentInterval = null;    commentInterval = setInterval(() => {      if (commentBarrageConfig.barrageList.length && !hoverOnCommentBarrage) {        popCommentBarrage(commentBarrageConfig.barrageList[commentBarrageConfig.barrageIndex]);        commentBarrageConfig.barrageIndex += 1;        commentBarrageConfig.barrageIndex %= commentBarrageConfig.barrageList.length;      }      if (        commentBarrageConfig.barrageTimer.length >          (commentBarrageConfig.barrageList.length > commentBarrageConfig.maxBarrage            ? commentBarrageConfig.maxBarrage            : commentBarrageConfig.barrageList.length) &&        !hoverOnCommentBarrage      ) {        removeCommentBarrage(commentBarrageConfig.barrageTimer.shift());      }    }, commentBarrageConfig.barrageTime);  }  function commentLinkFilter(data) {    data.sort((a, b) => {      return a.created - b.created;    });    let newData = [];    data.forEach(item => {      newData.push(...getCommentReplies(item));    });    return newData;  }  function getCommentReplies(item) {    if (item.replies) {      let replies = [item];      item.replies.forEach(item => {        replies.push(...getCommentReplies(item));      });      return replies;    } else {      return [];    }  }  function popCommentBarrage(data) {    let barrage = document.createElement("div");    barrage.className = "comment-barrage-item";    barrage.innerHTML = `          <div class="barrageHead">            <a class="barrageTitle ${              data.mailMd5 === commentBarrageConfig.mailMd5 ? "barrageBloggerTitle" : ""            }" href="javascript:anzhiyu.scrollTo('#post-comment')"">              ${data.mailMd5 === commentBarrageConfig.mailMd5 ? "博主" : "热评"}            </a>            <div class="barrageNick">${data.nick}</div>            <img class="nolazyload barrageAvatar" src="https://cravatar.cn/avatar/${data.mailMd5}"/>            <a class="comment-barrage-close" href="javascript:anzhiyu.switchCommentBarrage()"><i class="anzhiyufont anzhiyu-icon-xmark"></i></a>          </div>          <anzhiyu class="barrageContent" onClick="window.location.hash = '${data.id}'">            ${data.comment}          </anzhiyu>        `;    // 获取anzhiyu标签内的所有pre元素    let anzhiyuPres = barrage.querySelectorAll("anzhiyu pre");    // 遍历每个pre元素，将其替换为"【代码】"    anzhiyuPres.forEach(pre => {      let codePlaceholder = document.createElement("span");      codePlaceholder.innerText = "【代码】";      pre.parentNode.replaceChild(codePlaceholder, pre);    });    // 获取anzhiyu标签内的所有图片元素    let anzhiyuImages = barrage.querySelectorAll("anzhiyu img");    // 遍历每个图片元素，将其替换为"【图片】"，但排除带有class=tk-owo-emotion的图片    anzhiyuImages.forEach(image => {      if (!image.classList.contains("tk-owo-emotion")) {        image.style.display = "none"; // 隐藏图片        let placeholder = document.createElement("span");        placeholder.innerText = "【图片】";        image.parentNode.replaceChild(placeholder, image);      }    });    commentBarrageConfig.barrageTimer.push(barrage);    commentBarrageConfig.dom.append(barrage);  }  function removeCommentBarrage(barrage) {    barrage.className = "comment-barrage-item out";    setTimeout(() => {      if (commentBarrageConfig.dom && commentBarrageConfig.dom.contains(barrage)) {        commentBarrageConfig.dom.removeChild(barrage);      }    }, 1000);  }  // 自动隐藏  const commentEntryCallback = entries => {    const commentBarrage = document.querySelector(".comment-barrage");    const postComment = document.getElementById("post-comment");    entries.forEach(entry => {      if (postComment && commentBarrage && document.body.clientWidth > 768) {        commentBarrage.style.bottom = entry.isIntersecting ? `-${commentBarrageConfig.maxBarrage * 200}px` : "0";      }    });  };  // 创建IntersectionObserver实例  const observer = new IntersectionObserver(commentEntryCallback, {    root: null,    rootMargin: "0px",    threshold: 0,  });  // 监视目标元素  const postCommentTarget = document.getElementById("post-comment");  if (postCommentTarget) {    observer.observe(postCommentTarget);  }  initCommentBarrage();  if (localStorage.getItem("commentBarrageSwitch") !== "false") {    document.querySelector(".comment-barrage").style.display = "flex";    document.querySelector(".menu-commentBarrage-text").textContent = "关闭热评";  } else {    document.querySelector(".comment-barrage").style.display = "none";    document.querySelector(".menu-commentBarrage-text").textContent = "显示热评";  }  document.addEventListener("pjax:send", function () {    clearInterval(commentInterval);  });}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu/people.js"/>
      <url>/js/anzhiyu/people.js</url>
      
        <content type="html"><![CDATA["use strict";function _toConsumableArray(e) {  return _arrayWithoutHoles(e) || _iterableToArray(e) || _unsupportedIterableToArray(e) || _nonIterableSpread();}function _nonIterableSpread() {  throw new TypeError(    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."  );}function _unsupportedIterableToArray(e, r) {  if (e) {    if ("string" == typeof e) return _arrayLikeToArray(e, r);    var t = Object.prototype.toString.call(e).slice(8, -1);    return (      "Object" === t && e.constructor && (t = e.constructor.name),      "Map" === t || "Set" === t        ? Array.from(e)        : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)        ? _arrayLikeToArray(e, r)        : void 0    );  }}function _iterableToArray(e) {  if (("undefined" != typeof Symbol && null != e[Symbol.iterator]) || null != e["@@iterator"]) return Array.from(e);}function _arrayWithoutHoles(e) {  if (Array.isArray(e)) return _arrayLikeToArray(e);}function _arrayLikeToArray(e, r) {  (null == r || r > e.length) && (r = e.length);  for (var t = 0, a = new Array(r); t < r; t++) a[t] = e[t];  return a;}function _classCallCheck(e, r) {  if (!(e instanceof r)) throw new TypeError("Cannot call a class as a function");}function _defineProperties(e, r) {  for (var t = 0; t < r.length; t++) {    var a = r[t];    (a.enumerable = a.enumerable || !1),      (a.configurable = !0),      "value" in a && (a.writable = !0),      Object.defineProperty(e, a.key, a);  }}function _createClass(e, r, t) {  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), e;}var peopleConfig = {    src: GLOBAL_CONFIG.peoplecanvas.img,    rows: 15,    cols: 7,  },  randomRange = function (e, r) {    return e + Math.random() * (r - e);  },  randomIndex = function (e) {    return 0 | randomRange(0, e.length);  },  removeFromArray = function (e, r) {    return e.splice(r, 1)[0];  },  removeItemFromArray = function (e, r) {    return removeFromArray(e, e.indexOf(r));  },  removeRandomFromArray = function (e) {    return removeFromArray(e, randomIndex(e));  },  getRandomFromArray = function (e) {    return e[0 | randomIndex(e)];  },  resetPeep = function (e) {    var r,      t,      a = e.stage,      n = e.peep,      o = 0.5 < Math.random() ? 1 : -1,      i = 100 - 250 * gsap.parseEase("power2.in")(Math.random()),      s = a.height - n.height + i;    return (      1 == o ? ((r = -n.width), (t = a.width), (n.scaleX = 1)) : ((r = a.width + n.width), (t = 0), (n.scaleX = -1)),      (n.x = r),      (n.y = s),      {        startX: r,        startY: (n.anchorY = s),        endX: t,      }    );  },  normalWalk = function (e) {    var r = e.peep,      t = e.props,      a = (t.startX, t.startY),      n = t.endX,      o = gsap.timeline();    return (      o.timeScale(randomRange(0.5, 1.5)),      o.to(        r,        {          duration: 10,          x: n,          ease: "none",        },        0      ),      o.to(        r,        {          duration: 0.25,          repeat: 40,          yoyo: !0,          y: a - 10,        },        0      ),      o    );  },  walks = [normalWalk],  Peep = (function () {    function a(e) {      var r = e.image,        t = e.rect;      _classCallCheck(this, a),        (this.image = r),        this.setRect(t),        (this.x = 0),        (this.y = 0),        (this.anchorY = 0),        (this.scaleX = 1),        (this.walk = null);    }    return (      _createClass(a, [        {          key: "setRect",          value: function (e) {            (this.rect = e),              (this.width = e[2]),              (this.height = e[3]),              (this.drawArgs = [this.image].concat(_toConsumableArray(e), [0, 0, this.width, this.height]));          },        },        {          key: "render",          value: function (e) {            e.save(),              e.translate(this.x, this.y),              e.scale(this.scaleX, 1),              e.drawImage.apply(e, _toConsumableArray(this.drawArgs)),              e.restore();          },        },      ]),      a    );  })(),  img = document.createElement("img");(img.onload = init), (img.src = peopleConfig.src);let peoplecanvasEl = document.getElementById("peoplecanvas");let ctx = peoplecanvasEl ? peoplecanvasEl.getContext("2d") : undefined,  stage = {    width: 0,    height: 0,  },  allPeeps = [],  availablePeeps = [],  crowd = [];function init() {  if (!peoplecanvasEl) return;  createPeeps(), resize(), gsap.ticker.add(render), window.addEventListener("resize", resize);}document.addEventListener("pjax:success", e => {  peoplecanvasEl = document.getElementById("peoplecanvas");  if (peoplecanvasEl) {    (ctx = peoplecanvasEl ? peoplecanvasEl.getContext("2d") : undefined), window.removeEventListener("resize", resize);    gsap.ticker.remove(render);    setTimeout(() => {      if (!peoplecanvasEl) return;      resize(), gsap.ticker.add(render), window.addEventListener("resize", resize);    }, 300);  }});function createPeeps() {  for (    var e = peopleConfig.rows,      r = peopleConfig.cols,      t = e * r,      a = img.naturalWidth / e,      n = img.naturalHeight / r,      o = 0;    o < t;    o++  )    allPeeps.push(      new Peep({        image: img,        rect: [(o % e) * a, ((o / e) | 0) * n, a, n],      })    );}function resize() {  if (peoplecanvasEl && peoplecanvasEl.clientWidth != 0) {    (stage.width = peoplecanvasEl.clientWidth),      (stage.height = peoplecanvasEl.clientHeight),      (peoplecanvasEl.width = stage.width * devicePixelRatio),      (peoplecanvasEl.height = stage.height * devicePixelRatio),      crowd.forEach(function (e) {        e.walk.kill();      }),      (crowd.length = 0),      (availablePeeps.length = 0),      availablePeeps.push.apply(availablePeeps, allPeeps),      initCrowd();  }}function initCrowd() {  for (; availablePeeps.length; ) addPeepToCrowd().walk.progress(Math.random());}function addPeepToCrowd() {  var e = removeRandomFromArray(availablePeeps),    r = getRandomFromArray(walks)({      peep: e,      props: resetPeep({        peep: e,        stage: stage,      }),    }).eventCallback("onComplete", function () {      removePeepFromCrowd(e), addPeepToCrowd();    });  return (    (e.walk = r),    crowd.push(e),    crowd.sort(function (e, r) {      return e.anchorY - r.anchorY;    }),    e  );}function removePeepFromCrowd(e) {  removeItemFromArray(crowd, e), availablePeeps.push(e);}function render() {  if (!peoplecanvasEl) return;  (peoplecanvasEl.width = peoplecanvasEl.width),    ctx.save(),    ctx.scale(devicePixelRatio, devicePixelRatio),    crowd.forEach(function (e) {      e.render(ctx);    }),    ctx.restore();}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu/random_friends_post.js"/>
      <url>/js/anzhiyu/random_friends_post.js</url>
      
        <content type="html"><![CDATA[var fdata = {  apiurl: GLOBAL_CONFIG.friends_vue_info.apiurl,  defaultFish: 100,  hungryFish: 100,};//可通过 var fdataUser 替换默认值if (typeof fdataUser !== "undefined") {  for (var key in fdataUser) {    if (fdataUser[key]) {      fdata[key] = fdataUser[key];    }  }}var randomPostTimes = 0;var randomPostWorking = false;var randomPostTips = [  "钓到了绝世好文！",  "在河边打了个喷嚏，吓跑了",  "你和小伙伴抢夺着",  "你击败了巨龙，在巢穴中发现了",  "挖掘秦始皇坟时找到了",  "在路边闲逛的时候随手买了一个",  "从学校班主任那拿来了孩子上课偷偷看的",  "你的同桌无情的从你的语文书中撕下了那篇你最喜欢的",  "考古学家近日发现了",  "外星人降临地球学习地球文化，落地时被你塞了",  "从图书馆顶层的隐秘角落里发现了闪着金光的",  "徒弟修炼走火入魔，为师立刻掏出了",  "在大山中唱山歌，隔壁的阿妹跑来了，带着",  "隔壁家的孩子数学考了满分，都是因为看了",  "隔壁家的孩子英语考了满分，都是因为看了",  "小米研发了全新一代MIX手机，据说灵感",  "修炼渡劫成功，还好提前看了",  "库克坐上了苹果CEO的宝座，因为他面试的时候看了",  "阿里巴巴大喊芝麻开门，映入眼帘的就是",  "师傅说练武要先炼心，然后让我好生研读",  "科考队在南极大陆发现了被冰封的",  "飞机窗户似乎被一张纸糊上了，仔细一看是",  "历史上满写的仁义道德四个字，透过字缝里却全是",  "十几年前的录音机似乎还能够使用，插上电发现正在播的是",  "新版语文书拟增加一篇熟读并背诵的",  "经调查，99%的受访者都没有背诵过",  "今年的高考满分作文是",  "唐僧揭开了佛祖压在五指山上的",  "科学家发现能够解决衰老的秘密，就是每日研读",  "英特尔发布了全新的至强处理器，其芯片的制造原理都是",  "新的iPhone产能很足，新的进货渠道是",  "今年亩产突破了八千万斤，多亏了",  "陆隐一统天上宗，在无数祖境高手的目光下宣读了",  "黑钻风跟白钻风说道，吃了唐僧肉能长生不老，他知道是因为看了",  "上卫生间没带纸，直接提裤跑路也不愿意玷污手中",  "种下一篇文章就会产生很多很多文章，我种下了",  "三十年河东，三十年河西，莫欺我没有看过",  "踏破铁血无觅处，得来全靠",  "今日双色球中了两千万，预测全靠",  "因为卷子上没写名字，老师罚抄",  "为了抗议世间的不公，割破手指写下了",  "在艺术大街上被贴满了相同的纸，走近一看是",  "这区区迷阵岂能难得住我？其实能走出来多亏了",  "今日被一篇文章顶上了微博热搜，它是",  "你送给乞丐一个暴富秘籍，它是",  "UZI一个走A拿下五杀，在事后采访时说他当时回想起了",  "科学家解刨了第一个感染丧尸病毒的人，发现丧尸抗体存在于",  "如果你有梦想的话，就要努力去看",  "决定我们成为什么样人的，不是我们的能力，而是是否看过",  "有信心不一定会成功，没信心就去看",  "你真正是谁并不重要，重要的是你看没看过",  "玄天境重要的是锻体，为师赠你此书，好好修炼去吧，这是",  "上百祖境高手在天威湖大战三天三夜为了抢夺",  "这化仙池水乃上古真仙对后人的考校，要求熟读并背诵",  "庆氏三千年根基差点竟被你小子毁于一旦，能够被我拯救全是因为我看了",  "我就是神奇宝贝大师！我这只皮卡丘可是",  "我就是神奇宝贝大师！我这只小火龙可是",  "我就是神奇宝贝大师！我这只可达鸭可是",  "我就是神奇宝贝大师！我这只杰尼龟可是",  "上古遗迹中写道，只要习得此书，便得成功。你定睛一看，原来是",  "奶奶的，玩阴的是吧，我就是双料特工代号穿山甲，",  "你的背景太假了，我的就逼真多了，学到这个技术全是因为看了",  "我是云南的，云南怒江的，怒江芦水市，芦水市六库，六库傈僳族，傈僳族是",  "我真的栓Q了，我真的会谢如果你看",  "你已经习得退退退神功，接下来的心法已经被记录在",  "人生无常大肠包小肠，小肠包住了",  "你抽到了普通文章，它是",  "你收到了稀有文章，它是",  "你抽到了金色普通文章，它是",  "你抽到了金色稀有文章，它是",  "你抽到了传说文章！它是",  "哇！金色传说！你抽到了金色传说文章，它是",  "报告！侦察兵说在前往300米有一个男子在偷偷看一本书，上面赫然写着",  "芷莲姑娘大摆擂台，谁若是能读完此书，便可娶了她。然后从背后掏出了",  "请问你的梦想是什么？我的梦想是能读到",  "读什么才能增智慧？当然是读",  "纳兰嫣然掏出了退婚书，可是发现出门带错了，结果拿出了一本",  "你要尽全力保护你的梦想。那些嘲笑你的人，他们必定会失败，他们想把你变成和他们一样的人。如果你有梦想的话，就要努力去读",  "走人生的路就像爬山一样，看起来走了许多冤枉的路，崎岖的路，但终究需要读完",  "游戏的规则就是这么的简单，你听懂了吗？管你听没听懂，快去看",];var randomPostClick = 0;function fetchRandomPost() {  if (!document.getElementById("random-post")) return;  if (randomPostWorking == false) {    randomPostWorking = true;    //获取旋转角度    let randomRotate = randomPostTimes * 360;    let randomPostTipsItem = randomPostTips[Math.floor(Math.random() * randomPostTips.length)];    let randomPostLevel = "";    if (randomPostTimes > 10000) {      randomPostLevel = "愿者上钩";    } else if (randomPostTimes > 1000) {      randomPostLevel = "俯览天下";    } else if (randomPostTimes > 1000) {      randomPostLevel = "超越神了";    } else if (randomPostTimes > 100) {      randomPostLevel = "绝世渔夫";    } else if (randomPostTimes > 75) {      randomPostLevel = "钓鱼王者";    } else if (randomPostTimes > 50) {      randomPostLevel = "钓鱼宗师";    } else if (randomPostTimes > 20) {      randomPostLevel = "钓鱼专家";    } else if (randomPostTimes > 5) {      randomPostLevel = "钓鱼高手";    } else {      randomPostLevel = "钓鱼新手";    }    if (randomPostTimes >= 5) {      document.getElementById("random-post").innerHTML =        `钓鱼中... （Lv.` + randomPostTimes + ` 当前称号：` + randomPostLevel + `）`;    } else {      document.getElementById("random-post").innerHTML = `钓鱼中...`;    }    let randomTime = randomNum(1000, 3000);    if (randomPostTimes == 0) {      randomTime = 0;    }    document.querySelector(".random-post-start").style.opacity = "0.2";    document.querySelector(".random-post-start").style.transitionDuration = "0.3s";    document.querySelector(".random-post-start").style.transform = "rotate(" + randomRotate + "deg)";    //判断是否饥饿    if (      document.getElementById("random-post") &&      randomPostClick * fdata.hungryFish + fdata.defaultFish < randomPostTimes &&      Math.round(Math.random()) == 0    ) {      document.getElementById("random-post").innerHTML =        "因为只钓鱼不吃鱼，过分饥饿导致本次钓鱼失败...(点击任意一篇钓鱼获得的文章即可恢复）";      randomPostWorking = false;    } else {      var fetchUrl = fdata.apiurl + "randompost";      fetch(fetchUrl)        .then(res => res.json())        .then(json => {          var title = json.title;          var link = json.link;          var author = json.author;          if (document.getElementById("random-post")) {            window.setTimeout(function () {              document.getElementById("random-post").innerHTML =                randomPostTipsItem +                `来自友链 <b>` +                author +                `</b> 的文章：<a class="random-friends-post" onclick="randomClickLink()" target="_blank" href="` +                link +                `" rel="external nofollow">` +                title +                `</a>`;              randomPostTimes += 1;              localStorage.setItem("randomPostTimes", randomPostTimes);              document.querySelector(".random-post-start").style.opacity = "1";            }, randomTime);          }        });      randomPostWorking = false;    }  }}//初始化检查function initRandomPost() {  // 获取已经存储的数据  if (localStorage.randomPostTimes) {    randomPostTimes = parseInt(localStorage.randomPostTimes);    randomPostClick = parseInt(localStorage.randomPostClick);    document.querySelector(".random-post-start").style.transitionDuration = "0.3s";    document.querySelector(".random-post-start").style.transform = "rotate(" + 360 * randomPostTimes + "deg)";  }  fetchRandomPost();}initRandomPost();//添加点击统计function randomClickLink() {  randomPostClick += 1;  localStorage.setItem("randomPostClick", randomPostClick);}// 生成随机数function randomNum(minNum, maxNum) {  switch (arguments.length) {    case 1:      return parseInt(Math.random() * minNum + 1, 10);      break;    case 2:      return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);      break;    default:      return 0;      break;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu/right_click_menu.js"/>
      <url>/js/anzhiyu/right_click_menu.js</url>
      
        <content type="html"><![CDATA[// 初始化函数rm = {};//禁止图片与超链接拖拽let aElements = document.getElementsByTagName("a");for (let i = 0; i < aElements.length; i++) {  aElements[i].setAttribute("draggable", "false");  let imgElements = aElements[i].getElementsByTagName("img");  for (let j = 0; j < imgElements.length; j++) {    imgElements[j].setAttribute("draggable", "false");  }}// 显示菜单rm.showRightMenu = function (isTrue, x = 0, y = 0) {  console.info(x, y);  let rightMenu = document.getElementById("rightMenu");  rightMenu.style.top = x + "px";  rightMenu.style.left = y + "px";  if (isTrue) {    rightMenu.style.display = "block";    stopMaskScroll();  } else {    rightMenu.style.display = "none";  }};// 隐藏菜单rm.hideRightMenu = function () {  rm.showRightMenu(false);  let rightMenuMask = document.querySelector("#rightmenu-mask");  rightMenuMask.style.display = "none";};// 尺寸let rmWidth = document.getElementById("rightMenu").offsetWidth;let rmHeight = document.getElementById("rightMenu").offsetHeight;// 重新定义尺寸rm.reloadrmSize = function () {  rightMenu.style.visibility = "hidden";  rightMenu.style.display = "block";  // 获取宽度和高度  rmWidth = document.getElementById("rightMenu").offsetWidth;  rmHeight = document.getElementById("rightMenu").offsetHeight;  rightMenu.style.visibility = "visible";};// 获取点击的hreflet domhref = "";let domImgSrc = "";let globalEvent = null;var oncontextmenuFunction = function (event) {  if (document.body.clientWidth > 768) {    let pageX = event.clientX + 10; //加10是为了防止显示时鼠标遮在菜单上    let pageY = event.clientY;    //其他额外菜单    const $rightMenuOther = document.querySelector(".rightMenuOther");    const $rightMenuPlugin = document.querySelector(".rightMenuPlugin");    const $rightMenuCopyText = document.querySelector("#menu-copytext");    const $rightMenuPasteText = document.querySelector("#menu-pastetext");    const $rightMenuCommentText = document.querySelector("#menu-commenttext");    const $rightMenuNewWindow = document.querySelector("#menu-newwindow");    const $rightMenuNewWindowImg = document.querySelector("#menu-newwindowimg");    const $rightMenuCopyLink = document.querySelector("#menu-copylink");    const $rightMenuCopyImg = document.querySelector("#menu-copyimg");    const $rightMenuDownloadImg = document.querySelector("#menu-downloadimg");    const $rightMenuSearch = document.querySelector("#menu-search");    const $rightMenuSearchBaidu = document.querySelector("#menu-searchBaidu");    const $rightMenuMusicToggle = document.querySelector("#menu-music-toggle");    const $rightMenuMusicBack = document.querySelector("#menu-music-back");    const $rightMenuMusicForward = document.querySelector("#menu-music-forward");    const $rightMenuMusicPlaylist = document.querySelector("#menu-music-playlist");    const $rightMenuMusicCopyMusicName = document.querySelector("#menu-music-copyMusicName");    let href = event.target.href;    let imgsrc = event.target.currentSrc;    // 判断模式 扩展模式为有事件    let pluginMode = false;    $rightMenuOther.style.display = "block";    globalEvent = event;    // 检查是否需要复制 是否有选中文本    if (selectTextNow && window.getSelection()) {      pluginMode = true;      $rightMenuCopyText.style.display = "block";      $rightMenuCommentText.style.display = "block";      $rightMenuSearch.style.display = "block";      $rightMenuSearchBaidu.style.display = "block";    } else {      $rightMenuCopyText.style.display = "none";      $rightMenuCommentText.style.display = "none";      $rightMenuSearchBaidu.style.display = "none";      $rightMenuSearch.style.display = "none";    }    //检查是否右键点击了链接a标签    if (href) {      pluginMode = true;      $rightMenuNewWindow.style.display = "block";      $rightMenuCopyLink.style.display = "block";      domhref = href;    } else {      $rightMenuNewWindow.style.display = "none";      $rightMenuCopyLink.style.display = "none";    }    //检查是否需要复制图片    if (imgsrc) {      pluginMode = true;      $rightMenuCopyImg.style.display = "block";      $rightMenuDownloadImg.style.display = "block";      $rightMenuNewWindowImg.style.display = "block";      document.getElementById("rightMenu").style.width = "12rem";      domImgSrc = imgsrc;    } else {      $rightMenuCopyImg.style.display = "none";      $rightMenuDownloadImg.style.display = "none";      $rightMenuNewWindowImg.style.display = "none";    }    // 判断是否为输入框    if (event.target.tagName.toLowerCase() === "input" || event.target.tagName.toLowerCase() === "textarea") {      pluginMode = true;      $rightMenuPasteText.style.display = "block";    } else {      $rightMenuPasteText.style.display = "none";    }    const navMusicEl = document.querySelector("#nav-music");    //判断是否是音乐    if (navMusicEl && navMusicEl.contains(event.target)) {      pluginMode = true;      $rightMenuMusicToggle.style.display = "block";      $rightMenuMusicBack.style.display = "block";      $rightMenuMusicForward.style.display = "block";      $rightMenuMusicPlaylist.style.display = "block";      $rightMenuMusicCopyMusicName.style.display = "block";    } else {      $rightMenuMusicToggle.style.display = "none";      $rightMenuMusicBack.style.display = "none";      $rightMenuMusicForward.style.display = "none";      $rightMenuMusicPlaylist.style.display = "none";      $rightMenuMusicCopyMusicName.style.display = "none";    }    // 如果不是扩展模式则隐藏扩展模块    if (pluginMode) {      $rightMenuOther.style.display = "none";      $rightMenuPlugin.style.display = "block";    } else {      $rightMenuPlugin.style.display = "none";    }    rm.reloadrmSize();    // 鼠标默认显示在鼠标右下方，当鼠标靠右或靠下时，将菜单显示在鼠标左方\上方    if (pageX + rmWidth > window.innerWidth) {      pageX -= rmWidth + 10;    }    if (pageY + rmHeight > window.innerHeight) {      pageY -= pageY + rmHeight - window.innerHeight;    }    rm.showRightMenu(true, pageY, pageX);    document.getElementById("rightmenu-mask").style.display = "flex";    return false;  }};// 监听右键初始化window.oncontextmenu = oncontextmenuFunction;// 下载图片状态rm.downloadimging = false;// 复制图片到剪贴板rm.writeClipImg = function (imgsrc) {  console.log("按下复制");  rm.hideRightMenu();  anzhiyu.snackbarShow("正在下载中，请稍后", false, 10000);  if (rm.downloadimging == false) {    rm.downloadimging = true;    setTimeout(function () {      copyImage(imgsrc);      anzhiyu.snackbarShow("复制成功！图片已添加盲水印，请遵守版权协议");      rm.downloadimging = false;    }, "10000");  }};function imageToBlob(imageURL) {  const img = new Image();  const c = document.createElement("canvas");  const ctx = c.getContext("2d");  img.crossOrigin = "";  img.src = imageURL;  return new Promise(resolve => {    img.onload = function () {      c.width = this.naturalWidth;      c.height = this.naturalHeight;      ctx.drawImage(this, 0, 0);      c.toBlob(        blob => {          // here the image is a blob          resolve(blob);        },        "image/png",        0.75      );    };  });}async function copyImage(imageURL) {  const blob = await imageToBlob(imageURL);  const item = new ClipboardItem({ "image/png": blob });  navigator.clipboard.write([item]);}rm.copyUrl = function (id) {  const input = document.createElement("input"); // Create a new <input> element  input.id = "copyVal"; // Set the id of the new element to "copyVal"  document.body.appendChild(input); // Append the new element to the end of the <body> element  const text = id;  input.value = text;  input.select();  input.setSelectionRange(0, input.value.length);  document.execCommand("copy");  input.remove(); // Remove the <input> element from the DOM};function stopMaskScroll() {  if (document.getElementById("rightmenu-mask")) {    let xscroll = document.getElementById("rightmenu-mask");    xscroll.addEventListener(      "mousewheel",      function (e) {        //阻止浏览器默认方法        rm.hideRightMenu();        // e.preventDefault();      },      { passive: true }    );  }  if (document.getElementById("rightMenu")) {    let xscroll = document.getElementById("rightMenu");    xscroll.addEventListener(      "mousewheel",      function (e) {        //阻止浏览器默认方法        rm.hideRightMenu();        // e.preventDefault();      },      { passive: true }    );  }}rm.rightmenuCopyText = function (txt) {  if (navigator.clipboard) {    navigator.clipboard.writeText(txt);  }  rm.hideRightMenu();};rm.copyPageUrl = function (url) {  if (!url) {    url = window.location.href;  }  rm.copyUrl(url);  anzhiyu.snackbarShow("复制链接地址成功", false, 2000);  rm.hideRightMenu();};// 复制当前选中文本var selectTextNow = "";document.onmouseup = document.ondblclick = selceText;function selceText() {  var txt;  if (document.selection) {    txt = document.selection.createRange().text;  } else {    txt = window.getSelection().toString();  }  selectTextNow = txt !== "" ? txt : "";}// 读取剪切板rm.readClipboard = function () {  if (navigator.clipboard) {    navigator.clipboard.readText().then(clipText => rm.insertAtCaret(globalEvent.target, clipText));  }};// 粘贴文本到焦点rm.insertAtCaret = function (elemt, value) {  const startPos = elemt.selectionStart,    endPos = elemt.selectionEnd;  if (document.selection) {    elemt.focus();    var sel = document.selection.createRange();    sel.text = value;    elemt.focus();  } else {    if (startPos || startPos == "0") {      var scrollTop = elemt.scrollTop;      elemt.value = elemt.value.substring(0, startPos) + value + elemt.value.substring(endPos, elemt.value.length);      elemt.focus();      elemt.selectionStart = startPos + value.length;      elemt.selectionEnd = startPos + value.length;      elemt.scrollTop = scrollTop;    } else {      elemt.value += value;      elemt.focus();    }  }};//粘贴文本rm.pasteText = function () {  const result = rm.readClipboard() || "";  rm.hideRightMenu();};//引用到评论rm.rightMenuCommentText = function (txt) {  rm.hideRightMenu();  const postCommentDom = document.getElementById("post-comment");  var domTop = postCommentDom.offsetTop;  window.scrollTo(0, domTop - 80);  if (txt == "undefined" || txt == "null") txt = "好棒！";  function setText() {    setTimeout(() => {      var input = document.getElementsByClassName("el-textarea__inner")[0];      if (!input) setText();      let evt = document.createEvent("HTMLEvents");      evt.initEvent("input", true, true);      let inputValue = replaceAll(txt, "\n", "\n> ");      input.value = "> " + inputValue + "\n\n";      input.dispatchEvent(evt);      input.focus();      input.setSelectionRange(-1, -1);      if (document.getElementById("comment-tips")) {        document.getElementById("comment-tips").classList.add("show");      }    }, 100);  }  setText();};//替换所有内容function replaceAll(string, search, replace) {  return string.split(search).join(replace);}// 百度搜索rm.searchBaidu = function () {  anzhiyu.snackbarShow("即将跳转到百度搜索", false, 2000);  setTimeout(function () {    window.open("https://www.baidu.com/s?wd=" + selectTextNow);  }, "2000");  rm.hideRightMenu();};//分享链接rm.copyLink = function () {  rm.rightmenuCopyText(domhref);  anzhiyu.snackbarShow("已复制链接地址");};function addRightMenuClickEvent() {  // 添加点击事件  document.getElementById("menu-backward").addEventListener("click", function () {    window.history.back();    rm.hideRightMenu();  });  document.getElementById("menu-forward").addEventListener("click", function () {    window.history.forward();    rm.hideRightMenu();  });  document.getElementById("menu-refresh").addEventListener("click", function () {    window.location.reload();  });  document.getElementById("menu-top").addEventListener("click", function () {    anzhiyu.scrollToDest(0, 500);    rm.hideRightMenu();  });  document.getElementById("menu-translate").addEventListener("click", function () {    window.translateFn.translatePage();    rm.hideRightMenu();  });  const menuLinks = document.querySelectorAll(".menu-link");  menuLinks.forEach(function (link) {    link.addEventListener("click", rm.hideRightMenu);  });  document.getElementById("menu-home") &&    document.getElementById("menu-home").addEventListener("click", function () {      window.location.href = window.location.origin;    });  document.getElementById("menu-randomPost").addEventListener("click", function () {    toRandomPost();  });  document.getElementById("menu-commentBarrage").addEventListener("click", anzhiyu.switchCommentBarrage);  document.getElementById("rightmenu-mask").addEventListener("click", rm.hideRightMenu);  document.getElementById("rightmenu-mask").addEventListener("contextmenu", function (event) {    rm.hideRightMenu();    event.preventDefault(); // Prevent the default context menu from appearing  });  document.getElementById("menu-copy").addEventListener("click", () => {    rm.copyPageUrl();  });  document.getElementById("menu-pastetext").addEventListener("click", rm.pasteText);  document.getElementById("menu-copytext").addEventListener("click", function () {    rm.rightmenuCopyText(selectTextNow);    const copyright = GLOBAL_CONFIG.copyright;    if (copyright.copy) {      anzhiyu.snackbarShow(copyright.languages.copySuccess);    }  });  document.getElementById("menu-commenttext").addEventListener("click", function () {    rm.rightMenuCommentText(selectTextNow);  });  document.getElementById("menu-newwindow").addEventListener("click", function () {    window.open(domhref, "_blank");    rm.hideRightMenu();  });  document.getElementById("menu-copylink").addEventListener("click", rm.copyLink);  document.getElementById("menu-downloadimg").addEventListener("click", function () {    anzhiyu.downloadImage(domImgSrc, "anzhiyu");  });  document.getElementById("menu-newwindowimg").addEventListener("click", function () {    window.open(domImgSrc, "_blank");    rm.hideRightMenu();  });  document.getElementById("menu-copyimg").addEventListener("click", function () {    rm.writeClipImg(domImgSrc);  });  document.getElementById("menu-searchBaidu").addEventListener("click", rm.searchBaidu);  //音乐  document.getElementById("menu-music-toggle").addEventListener("click", anzhiyu.musicToggle);  document.getElementById("menu-music-back").addEventListener("click", anzhiyu.musicSkipBack);  document.getElementById("menu-music-forward").addEventListener("click", anzhiyu.musicSkipForward);  document.getElementById("menu-music-copyMusicName").addEventListener("click", function () {    rm.rightmenuCopyText(anzhiyu.musicGetName());    anzhiyu.snackbarShow("复制歌曲名称成功", false, 3000);  });}addRightMenuClickEvent();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/search/algolia.js"/>
      <url>/js/search/algolia.js</url>
      
        <content type="html"><![CDATA[window.addEventListener("load", () => {  const $searchMask = document.getElementById("search-mask");  const $searchDialog = document.querySelector("#algolia-search .search-dialog");  const openSearch = () => {    anzhiyu.animateIn($searchMask, "to_show 0.5s");    $searchDialog.style.display = "block";    setTimeout(() => {      document.querySelector("#algolia-search .ais-SearchBox-input").focus();    }, 100);    // shortcut: ESC    document.addEventListener("keydown", function f(event) {      if (event.code === "Escape") {        closeSearch();        document.removeEventListener("keydown", f);      }    });    fixSafariHeight();    window.addEventListener("resize", fixSafariHeight);  };  // shortcut: shift+S  if (anzhiyu_keyboard) {    window.addEventListener("keydown", function (event) {      if (event.keyCode == 83 && event.shiftKey) {        console.info(selectTextNow);        if (selectTextNow) {          openSearch();          const t = document.querySelector("#algolia-search-input > div > form > input");          t.value = selectTextNow;          t.dispatchEvent(new Event("input"));          setTimeout(() => {            document.querySelector("#algolia-search-input > div > form > button.ais-SearchBox-submit").click();          }, 64);        } else {          openSearch();        }        return false;      }    });  }  const closeSearch = () => {    anzhiyu.animateOut($searchDialog, "search_close .5s");    anzhiyu.animateOut($searchMask, "to_hide 0.5s");    window.removeEventListener("resize", fixSafariHeight);  };  // fix safari  const fixSafariHeight = () => {    if (window.innerWidth < 768) {      $searchDialog.style.setProperty("--search-height", window.innerHeight + "px");    }  };  const searchClickFn = () => {    anzhiyu.addEventListenerPjax(document.querySelector("#search-button > .search"), "click", openSearch);  };  const searchFnOnce = () => {    $searchMask.addEventListener("click", closeSearch);    document.querySelector("#algolia-search .search-close-button").addEventListener("click", closeSearch);  };  const algolia = GLOBAL_CONFIG.algolia;  const isAlgoliaValid = algolia.appId && algolia.apiKey && algolia.indexName;  if (!isAlgoliaValid) {    return console.error("Algolia setting is invalid!");  }  const search = instantsearch({    indexName: algolia.indexName,    /* global algoliasearch */    searchClient: algoliasearch(algolia.appId, algolia.apiKey),    searchFunction(helper) {      if (helper.state.query) {        let innerLoading = '<i class="anzhiyufont anzhiyu-icon-spinner anzhiyu-spin"></i>';        document.getElementById("algolia-hits").innerHTML = innerLoading;        helper.search();      }    },  });  const configure = instantsearch.widgets.configure({    hitsPerPage: algolia.hits.per_page ?? 5,  });  const searchBox = instantsearch.widgets.searchBox({    container: "#algolia-search-input",    showReset: false,    showSubmit: false,    placeholder: algolia.languages.input_placeholder,    showLoadingIndicator: true,    searchOnEnterKeyPressOnly: true,    searchAsYouType: false,  });  const hits = instantsearch.widgets.hits({    container: "#algolia-hits",    templates: {      item(data) {        const link = data.permalink ? data.permalink : GLOBAL_CONFIG.root + data.path;        const result = data._highlightResult;        const loadingLogo = document.querySelector("#algolia-hits .anzhiyu-spin");        if (loadingLogo) {          loadingLogo.style.display = "none";        }        setTimeout(() => {          document.querySelector("#algolia-search .ais-SearchBox-input").focus();        }, 200);        return `          <a href="${link}" class="algolia-hit-item-link">          <span class="algolia-hits-item-title">${result.title.value || "no-title"}</span>          </a>`;      },      empty: function (data) {        const loadingLogo = document.querySelector("#algolia-hits .anzhiyu-spin");        console.info(loadingLogo);        if (loadingLogo) {          loadingLogo.style.display = "none";        }        setTimeout(() => {          document.querySelector("#algolia-search .ais-SearchBox-input").focus();        }, 200);        return (          '<div id="algolia-hits-empty">' +          GLOBAL_CONFIG.algolia.languages.hits_empty.replace(/\$\{query}/, data.query) +          "</div>"        );      },    },    cssClasses: {      item: "algolia-hit-item",    },  });  const stats = instantsearch.widgets.stats({    container: "#algolia-info > .algolia-stats",    templates: {      text: function (data) {        const stats = GLOBAL_CONFIG.algolia.languages.hits_stats          .replace(/\$\{hits}/, data.nbHits)          .replace(/\$\{time}/, data.processingTimeMS);        return `<hr>${stats}`;      },    },  });  const powerBy = instantsearch.widgets.poweredBy({    container: "#algolia-info > .algolia-poweredBy",  });  const pagination = instantsearch.widgets.pagination({    container: "#algolia-pagination",    totalPages: algolia.hits.per_page ?? 5,    templates: {      first: '<i class="anzhiyufont anzhiyu-icon-angle-double-left"></i>',      last: '<i class="anzhiyufont anzhiyu-icon-angle-double-right"></i>',      previous: '<i class="anzhiyufont anzhiyu-icon-angle-left"></i>',      next: '<i class="anzhiyufont anzhiyu-icon-angle-right"></i>',    },    scrollTo: false,    showFirstLast: false,    cssClasses: {      root: "pagination",      item: "pagination-item",      link: "page-number",      active: "current",      disabled: "disabled-item",    },  });  search.addWidgets([configure, searchBox, hits, stats, powerBy, pagination]); // add the widgets to the instantsearch instance  search.start();  searchClickFn();  searchFnOnce();  window.addEventListener("pjax:complete", () => {    !anzhiyu.isHidden($searchMask) && closeSearch();    searchClickFn();  });  window.pjax &&    search.on("render", () => {      window.pjax.refresh(document.getElementById("algolia-hits"));    });});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/search/local-search.js"/>
      <url>/js/search/local-search.js</url>
      
        <content type="html"><![CDATA[window.addEventListener("load", () => {  let loadFlag = false;  let dataObj = [];  const $searchMask = document.getElementById("search-mask");  const openSearch = () => {    const bodyStyle = document.body.style;    bodyStyle.width = "100%";    bodyStyle.overflow = "hidden";    anzhiyu.animateIn($searchMask, "to_show 0.5s");    anzhiyu.animateIn(document.querySelector("#local-search .search-dialog"), "titleScale 0.5s");    setTimeout(() => {      document.querySelector("#local-search-input input").focus();    }, 100);    if (!loadFlag) {      search();      loadFlag = true;    }    // shortcut: ESC    document.addEventListener("keydown", function f(event) {      if (event.code === "Escape") {        closeSearch();        document.removeEventListener("keydown", f);      }    });  };  const closeSearch = () => {    const bodyStyle = document.body.style;    bodyStyle.width = "";    bodyStyle.overflow = "";    anzhiyu.animateOut(document.querySelector("#local-search .search-dialog"), "search_close .5s");    anzhiyu.animateOut($searchMask, "to_hide 0.5s");  };  const searchClickFn = () => {    document.querySelector("#search-button > .search").addEventListener("click", openSearch);    document.querySelector("#menu-search").addEventListener("click", openSearch);  };  const searchClickFnOnce = () => {    document.querySelector("#local-search .search-close-button").addEventListener("click", closeSearch);    $searchMask.addEventListener("click", closeSearch);    if (GLOBAL_CONFIG.localSearch.preload) dataObj = fetchData(GLOBAL_CONFIG.localSearch.path);  };  // check url is json or not  const isJson = url => {    const reg = /\.json$/;    return reg.test(url);  };  const fetchData = async path => {    let data = [];    const response = await fetch(path);    if (isJson(path)) {      data = await response.json();    } else {      const res = await response.text();      const t = await new window.DOMParser().parseFromString(res, "text/xml");      const a = await t;      data = [...a.querySelectorAll("entry")].map(item => {        let tagsArr = [];        if (item.querySelector("tags") && item.querySelector("tags").getElementsByTagName("tag")) {          Array.prototype.forEach.call(item.querySelector("tags").getElementsByTagName("tag"), function (item, index) {            tagsArr.push(item.textContent);          });        }        let content = item.querySelector("content") && item.querySelector("content").textContent;        let imgReg = /<img.*?(?:>|\/>)/gi; //匹配图片中的img标签        let srcReg = /src=[\'\"]?([^\'\"]*)[\'\"]?/i; // 匹配图片中的src        let arr = content.match(imgReg); //筛选出所有的img        let srcArr = [];        if (arr) {          for (let i = 0; i < arr.length; i++) {            let src = arr[i].match(srcReg);            // 获取图片地址            if (!src[1].indexOf("http")) srcArr.push(src[1]);          }        }        return {          title: item.querySelector("title").textContent,          content: content,          url: item.querySelector("url").textContent,          tags: tagsArr,          oneImage: srcArr && srcArr[0],        };      });    }    if (response.ok) {      const $loadDataItem = document.getElementById("loading-database");      $loadDataItem.nextElementSibling.style.display = "block";      $loadDataItem.remove();    }    return data;  };  const search = () => {    if (!GLOBAL_CONFIG.localSearch.preload) {      dataObj = fetchData(GLOBAL_CONFIG.localSearch.path);    }    const $input = document.querySelector("#local-search-input input");    const $resultContent = document.getElementById("local-search-results");    const $loadingStatus = document.getElementById("loading-status");    $input.addEventListener("input", function () {      const keywords = this.value.trim().toLowerCase().split(/[\s]+/);      if (keywords[0] !== "")        $loadingStatus.innerHTML = '<i class="anzhiyufont anzhiyu-icon-spinner anzhiyu-pulse-icon"></i>';      $resultContent.innerHTML = "";      let str = '<div class="search-result-list">';      if (keywords.length <= 0) return;      let count = 0;      // perform local searching      dataObj.then(data => {        data.forEach(data => {          let isMatch = true;          let dataTitle = data.title ? data.title.trim().toLowerCase() : "";          let dataTags = data.tags;          let oneImage = data.oneImage ?? "";          const dataContent = data.content            ? data.content                .trim()                .replace(/<[^>]+>/g, "")                .toLowerCase()            : "";          const dataUrl = data.url.startsWith("/") ? data.url : GLOBAL_CONFIG.root + data.url;          let indexTitle = -1;          let indexContent = -1;          let firstOccur = -1;          // only match articles with not empty titles and contents          if (dataTitle !== "" || dataContent !== "") {            keywords.forEach((keyword, i) => {              indexTitle = dataTitle.indexOf(keyword);              indexContent = dataContent.indexOf(keyword);              if (indexTitle < 0 && indexContent < 0) {                isMatch = false;              } else {                if (indexContent < 0) {                  indexContent = 0;                }                if (i === 0) {                  firstOccur = indexContent;                }              }            });          } else {            isMatch = false;          }          // show search results          if (isMatch) {            if (firstOccur >= 0) {              // cut out 130 characters              // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30              // let end = firstOccur + 50 > dataContent.length ? dataContent.length : firstOccur + 50              let start = firstOccur - 30;              let end = firstOccur + 100;              let pre = "";              let post = "";              if (start < 0) {                start = 0;              }              if (start === 0) {                end = 100;              } else {                pre = "...";              }              if (end > dataContent.length) {                end = dataContent.length;              } else {                post = "...";              }              let matchContent = dataContent.substring(start, end);              // highlight all keywords              keywords.forEach(keyword => {                const regS = new RegExp(keyword, "gi");                matchContent = matchContent.replace(regS, '<span class="search-keyword">' + keyword + "</span>");                dataTitle = dataTitle.replace(regS, '<span class="search-keyword">' + keyword + "</span>");              });              str += '<div class="local-search__hit-item">';              if (oneImage) {                str += `<div class="search-left"><img src=${oneImage} alt=${dataTitle} data-fancybox='gallery'>`;              } else {                str += '<div class="search-left" style="width:0">';              }              str += "</div>";              if (oneImage) {                str +=                  '<div class="search-right"><a href="' +                  dataUrl +                  '" class="search-result-title">' +                  dataTitle +                  "</a>";              } else {                str +=                  '<div class="search-right" style="width: 100%"><a href="' +                  dataUrl +                  '" class="search-result-title">' +                  dataTitle +                  "</a>";              }              count += 1;              if (dataContent !== "") {                str +=                  '<p class="search-result" onclick="pjax.loadUrl(`' +                  dataUrl +                  '`)">' +                  pre +                  matchContent +                  post +                  "</p>";              }              if (dataTags.length) {                str += '<div class="search-result-tags">';                for (let i = 0; i < dataTags.length; i++) {                  const element = dataTags[i].trim();                  str +=                    '<a class="tag-list" href="/tags/' +                    element +                    '/" data-pjax-state="" one-link-mark="yes">#' +                    element +                    "</a>";                }                str += "</div>";              }            }            str += "</div></div>";          }        });        if (count === 0) {          str +=            '<div id="local-search__hits-empty">' +            GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\$\{query}/, this.value.trim()) +            "</div>";        }        str += "</div>";        $resultContent.innerHTML = str;        if (keywords[0] !== "") $loadingStatus.innerHTML = "";        window.pjax && window.pjax.refresh($resultContent);      });    });  };  searchClickFn();  searchClickFnOnce();  // pjax  window.addEventListener("pjax:complete", () => {    !anzhiyu.isHidden($searchMask) && closeSearch();    searchClickFn();  });});]]></content>
      
    </entry>
    
    
  
</search>
